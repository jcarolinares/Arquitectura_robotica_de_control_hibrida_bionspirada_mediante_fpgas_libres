// Code generated by Icestudio 0.5.1n201120

`default_nettype none

module main #(
 parameter vb0e915 = "ar_arm.list",
 parameter v2e51fd = 64,
 parameter vfb538e = 0,
 parameter v2e72a9 = "sr_shoulder.list",
 parameter vea5a87 = 255,
 parameter v3c3bf8 = "rr_leg.list",
 parameter v6e865c = 64,
 parameter vf6a331 = 0,
 parameter v7096ad = 64,
 parameter vbfa9b0 = 20,
 parameter vfc4d1f = 0,
 parameter v898ae8 = 0,
 parameter v4c3fa2 = 255,
 parameter v04c279 = 255,
 parameter v47a520 = -45,
 parameter v5a0166 = "yr_leg.list",
 parameter v59f362 = -2,
 parameter vd41896 = 127,
 parameter vc6777b = 64,
 parameter v324120 = 127,
 parameter v39982f = 0,
 parameter v50ee6c = 1,
 parameter v3aab3b = 255,
 parameter vfc35b5 = "head.list",
 parameter v65b9ea = 30,
 parameter v792a23 = 10,
 parameter v69ab31 = 7,
 parameter vfc3a90 = 64,
 parameter v0f9119 = 127,
 parameter vfa03d5 = 0,
 parameter v1acdb2 = 255,
 parameter vd3c88d = 64,
 parameter v2c5608 = 0,
 parameter v2a1e14 = 1,
 parameter vf75716 = 127,
 parameter vef8ea4 = "yl_leg.list",
 parameter v171ab7 = 64,
 parameter v4f706e = 0,
 parameter v05acea = 255,
 parameter v1600d1 = "sl_shoulder.list",
 parameter v499068 = 0,
 parameter v439bc4 = "rl_leg.list",
 parameter v85a974 = 64,
 parameter v8a6491 = 127,
 parameter v92b0f3 = 64,
 parameter vd996de = 0,
 parameter v95b072 = 0,
 parameter v1aa648 = 255,
 parameter v45eefe = 255,
 parameter ved84af = 20,
 parameter v61d884 = "al_arm.list",
 parameter vfc9ecb = 0,
 parameter va2e4f6 = 127,
 parameter ve68d85 = 64,
 parameter v6f8aba = 127,
 parameter vc9e62c = 0,
 parameter v1d7781 = 255,
 parameter v7b83d5 = 0,
 parameter v0098e0 = 255
) (
 input v60f944,
 input vclk,
 output v85b694,
 output v2cbf9e,
 output v2eca8c,
 output v29e598,
 output v64a91e,
 output [7:0] vc25e5a,
 output v2777b0,
 output v1a0cb8,
 output vd55519,
 output v73f20f
);
 localparam p0 = vd3c88d;
 localparam p2 = v65b9ea;
 localparam p4 = v3c3bf8;
 localparam p5 = v7096ad;
 localparam p7 = v898ae8;
 localparam p8 = v04c279;
 localparam p9 = v59f362;
 localparam p10 = v324120;
 localparam p14 = v2a1e14;
 localparam p18 = v69ab31;
 localparam p20 = v50ee6c;
 localparam p21 = v439bc4;
 localparam p22 = v92b0f3;
 localparam p24 = v95b072;
 localparam p25 = v45eefe;
 localparam p26 = vfc9ecb;
 localparam p27 = v6f8aba;
 localparam p29 = v5a0166;
 localparam p30 = vc6777b;
 localparam p32 = v39982f;
 localparam p33 = v3aab3b;
 localparam p34 = v792a23;
 localparam p35 = v0f9119;
 localparam p37 = vef8ea4;
 localparam p38 = v171ab7;
 localparam p40 = v4f706e;
 localparam p41 = v05acea;
 localparam p42 = v499068;
 localparam p43 = v8a6491;
 localparam p45 = v2e72a9;
 localparam p46 = v6e865c;
 localparam p48 = vfc4d1f;
 localparam p49 = v4c3fa2;
 localparam p50 = v47a520;
 localparam p51 = vd41896;
 localparam p53 = v1600d1;
 localparam p54 = v85a974;
 localparam p56 = vd996de;
 localparam p57 = v1aa648;
 localparam p58 = ved84af;
 localparam p59 = va2e4f6;
 localparam p61 = vfc35b5;
 localparam p62 = vfc3a90;
 localparam p64 = vfa03d5;
 localparam p65 = v1acdb2;
 localparam p66 = v2c5608;
 localparam p67 = vf75716;
 localparam p69 = vb0e915;
 localparam p70 = v2e51fd;
 localparam p72 = vfb538e;
 localparam p73 = vea5a87;
 localparam p74 = vf6a331;
 localparam p75 = vbfa9b0;
 localparam p77 = v61d884;
 localparam p78 = ve68d85;
 localparam p80 = vc9e62c;
 localparam p81 = v1d7781;
 localparam p82 = v7b83d5;
 localparam p83 = v0098e0;
 wire w1;
 wire w3;
 wire w6;
 wire [0:7] w11;
 wire w12;
 wire w13;
 wire w15;
 wire w16;
 wire w17;
 wire w19;
 wire w23;
 wire [0:7] w28;
 wire w31;
 wire [0:7] w36;
 wire w39;
 wire [0:7] w44;
 wire w47;
 wire [0:7] w52;
 wire w55;
 wire [0:7] w60;
 wire w63;
 wire [0:7] w68;
 wire w71;
 wire [0:7] w76;
 wire w79;
 wire [0:7] w84;
 wire w85;
 wire w86;
 wire w87;
 wire w88;
 wire w89;
 wire w90;
 wire w91;
 wire w92;
 wire w93;
 wire w94;
 wire w95;
 wire w96;
 wire w97;
 wire w98;
 wire w99;
 wire w100;
 wire w101;
 wire w102;
 wire w103;
 wire w104;
 wire w105;
 wire w106;
 wire w107;
 wire w108;
 wire [0:7] w109;
 wire [0:7] w110;
 wire [0:7] w111;
 wire [0:7] w112;
 wire [0:7] w113;
 wire [0:7] w114;
 wire [0:7] w115;
 wire [0:7] w116;
 wire [0:7] w117;
 wire [0:7] w118;
 wire w119;
 wire w120;
 wire w121;
 wire w122;
 wire w123;
 wire w124;
 wire w125;
 wire w126;
 wire w127;
 wire w128;
 assign vd55519 = w6;
 assign w13 = v60f944;
 assign v73f20f = w23;
 assign v1a0cb8 = w31;
 assign v2777b0 = w39;
 assign v2eca8c = w47;
 assign v2cbf9e = w55;
 assign v85b694 = w63;
 assign v64a91e = w71;
 assign v29e598 = w79;
 assign w85 = vclk;
 assign w86 = vclk;
 assign w87 = vclk;
 assign w88 = vclk;
 assign w89 = vclk;
 assign w90 = vclk;
 assign w91 = vclk;
 assign w92 = vclk;
 assign w93 = vclk;
 assign w94 = vclk;
 assign w95 = vclk;
 assign w96 = vclk;
 assign w97 = vclk;
 assign w98 = vclk;
 assign w99 = vclk;
 assign w100 = vclk;
 assign w101 = vclk;
 assign w102 = vclk;
 assign w103 = vclk;
 assign w104 = vclk;
 assign w105 = vclk;
 assign w106 = vclk;
 assign w107 = vclk;
 assign w108 = vclk;
 assign vc25e5a = w114;
 assign w86 = w85;
 assign w87 = w85;
 assign w87 = w86;
 assign w88 = w85;
 assign w88 = w86;
 assign w88 = w87;
 assign w89 = w85;
 assign w89 = w86;
 assign w89 = w87;
 assign w89 = w88;
 assign w90 = w85;
 assign w90 = w86;
 assign w90 = w87;
 assign w90 = w88;
 assign w90 = w89;
 assign w91 = w85;
 assign w91 = w86;
 assign w91 = w87;
 assign w91 = w88;
 assign w91 = w89;
 assign w91 = w90;
 assign w92 = w85;
 assign w92 = w86;
 assign w92 = w87;
 assign w92 = w88;
 assign w92 = w89;
 assign w92 = w90;
 assign w92 = w91;
 assign w93 = w85;
 assign w93 = w86;
 assign w93 = w87;
 assign w93 = w88;
 assign w93 = w89;
 assign w93 = w90;
 assign w93 = w91;
 assign w93 = w92;
 assign w94 = w85;
 assign w94 = w86;
 assign w94 = w87;
 assign w94 = w88;
 assign w94 = w89;
 assign w94 = w90;
 assign w94 = w91;
 assign w94 = w92;
 assign w94 = w93;
 assign w95 = w85;
 assign w95 = w86;
 assign w95 = w87;
 assign w95 = w88;
 assign w95 = w89;
 assign w95 = w90;
 assign w95 = w91;
 assign w95 = w92;
 assign w95 = w93;
 assign w95 = w94;
 assign w96 = w85;
 assign w96 = w86;
 assign w96 = w87;
 assign w96 = w88;
 assign w96 = w89;
 assign w96 = w90;
 assign w96 = w91;
 assign w96 = w92;
 assign w96 = w93;
 assign w96 = w94;
 assign w96 = w95;
 assign w97 = w85;
 assign w97 = w86;
 assign w97 = w87;
 assign w97 = w88;
 assign w97 = w89;
 assign w97 = w90;
 assign w97 = w91;
 assign w97 = w92;
 assign w97 = w93;
 assign w97 = w94;
 assign w97 = w95;
 assign w97 = w96;
 assign w98 = w85;
 assign w98 = w86;
 assign w98 = w87;
 assign w98 = w88;
 assign w98 = w89;
 assign w98 = w90;
 assign w98 = w91;
 assign w98 = w92;
 assign w98 = w93;
 assign w98 = w94;
 assign w98 = w95;
 assign w98 = w96;
 assign w98 = w97;
 assign w99 = w85;
 assign w99 = w86;
 assign w99 = w87;
 assign w99 = w88;
 assign w99 = w89;
 assign w99 = w90;
 assign w99 = w91;
 assign w99 = w92;
 assign w99 = w93;
 assign w99 = w94;
 assign w99 = w95;
 assign w99 = w96;
 assign w99 = w97;
 assign w99 = w98;
 assign w100 = w85;
 assign w100 = w86;
 assign w100 = w87;
 assign w100 = w88;
 assign w100 = w89;
 assign w100 = w90;
 assign w100 = w91;
 assign w100 = w92;
 assign w100 = w93;
 assign w100 = w94;
 assign w100 = w95;
 assign w100 = w96;
 assign w100 = w97;
 assign w100 = w98;
 assign w100 = w99;
 assign w101 = w85;
 assign w101 = w86;
 assign w101 = w87;
 assign w101 = w88;
 assign w101 = w89;
 assign w101 = w90;
 assign w101 = w91;
 assign w101 = w92;
 assign w101 = w93;
 assign w101 = w94;
 assign w101 = w95;
 assign w101 = w96;
 assign w101 = w97;
 assign w101 = w98;
 assign w101 = w99;
 assign w101 = w100;
 assign w102 = w85;
 assign w102 = w86;
 assign w102 = w87;
 assign w102 = w88;
 assign w102 = w89;
 assign w102 = w90;
 assign w102 = w91;
 assign w102 = w92;
 assign w102 = w93;
 assign w102 = w94;
 assign w102 = w95;
 assign w102 = w96;
 assign w102 = w97;
 assign w102 = w98;
 assign w102 = w99;
 assign w102 = w100;
 assign w102 = w101;
 assign w103 = w85;
 assign w103 = w86;
 assign w103 = w87;
 assign w103 = w88;
 assign w103 = w89;
 assign w103 = w90;
 assign w103 = w91;
 assign w103 = w92;
 assign w103 = w93;
 assign w103 = w94;
 assign w103 = w95;
 assign w103 = w96;
 assign w103 = w97;
 assign w103 = w98;
 assign w103 = w99;
 assign w103 = w100;
 assign w103 = w101;
 assign w103 = w102;
 assign w104 = w85;
 assign w104 = w86;
 assign w104 = w87;
 assign w104 = w88;
 assign w104 = w89;
 assign w104 = w90;
 assign w104 = w91;
 assign w104 = w92;
 assign w104 = w93;
 assign w104 = w94;
 assign w104 = w95;
 assign w104 = w96;
 assign w104 = w97;
 assign w104 = w98;
 assign w104 = w99;
 assign w104 = w100;
 assign w104 = w101;
 assign w104 = w102;
 assign w104 = w103;
 assign w105 = w85;
 assign w105 = w86;
 assign w105 = w87;
 assign w105 = w88;
 assign w105 = w89;
 assign w105 = w90;
 assign w105 = w91;
 assign w105 = w92;
 assign w105 = w93;
 assign w105 = w94;
 assign w105 = w95;
 assign w105 = w96;
 assign w105 = w97;
 assign w105 = w98;
 assign w105 = w99;
 assign w105 = w100;
 assign w105 = w101;
 assign w105 = w102;
 assign w105 = w103;
 assign w105 = w104;
 assign w106 = w85;
 assign w106 = w86;
 assign w106 = w87;
 assign w106 = w88;
 assign w106 = w89;
 assign w106 = w90;
 assign w106 = w91;
 assign w106 = w92;
 assign w106 = w93;
 assign w106 = w94;
 assign w106 = w95;
 assign w106 = w96;
 assign w106 = w97;
 assign w106 = w98;
 assign w106 = w99;
 assign w106 = w100;
 assign w106 = w101;
 assign w106 = w102;
 assign w106 = w103;
 assign w106 = w104;
 assign w106 = w105;
 assign w107 = w85;
 assign w107 = w86;
 assign w107 = w87;
 assign w107 = w88;
 assign w107 = w89;
 assign w107 = w90;
 assign w107 = w91;
 assign w107 = w92;
 assign w107 = w93;
 assign w107 = w94;
 assign w107 = w95;
 assign w107 = w96;
 assign w107 = w97;
 assign w107 = w98;
 assign w107 = w99;
 assign w107 = w100;
 assign w107 = w101;
 assign w107 = w102;
 assign w107 = w103;
 assign w107 = w104;
 assign w107 = w105;
 assign w107 = w106;
 assign w108 = w85;
 assign w108 = w86;
 assign w108 = w87;
 assign w108 = w88;
 assign w108 = w89;
 assign w108 = w90;
 assign w108 = w91;
 assign w108 = w92;
 assign w108 = w93;
 assign w108 = w94;
 assign w108 = w95;
 assign w108 = w96;
 assign w108 = w97;
 assign w108 = w98;
 assign w108 = w99;
 assign w108 = w100;
 assign w108 = w101;
 assign w108 = w102;
 assign w108 = w103;
 assign w108 = w104;
 assign w108 = w105;
 assign w108 = w106;
 assign w108 = w107;
 assign w110 = w109;
 assign w111 = w109;
 assign w111 = w110;
 assign w112 = w109;
 assign w112 = w110;
 assign w112 = w111;
 assign w113 = w109;
 assign w113 = w110;
 assign w113 = w111;
 assign w113 = w112;
 assign w114 = w109;
 assign w114 = w110;
 assign w114 = w111;
 assign w114 = w112;
 assign w114 = w113;
 assign w115 = w109;
 assign w115 = w110;
 assign w115 = w111;
 assign w115 = w112;
 assign w115 = w113;
 assign w115 = w114;
 assign w116 = w109;
 assign w116 = w110;
 assign w116 = w111;
 assign w116 = w112;
 assign w116 = w113;
 assign w116 = w114;
 assign w116 = w115;
 assign w117 = w109;
 assign w117 = w110;
 assign w117 = w111;
 assign w117 = w112;
 assign w117 = w113;
 assign w117 = w114;
 assign w117 = w115;
 assign w117 = w116;
 assign w118 = w109;
 assign w118 = w110;
 assign w118 = w111;
 assign w118 = w112;
 assign w118 = w113;
 assign w118 = w114;
 assign w118 = w115;
 assign w118 = w116;
 assign w118 = w117;
 assign w120 = w119;
 assign w121 = w119;
 assign w121 = w120;
 assign w122 = w119;
 assign w122 = w120;
 assign w122 = w121;
 assign w123 = w119;
 assign w123 = w120;
 assign w123 = w121;
 assign w123 = w122;
 assign w124 = w119;
 assign w124 = w120;
 assign w124 = w121;
 assign w124 = w122;
 assign w124 = w123;
 assign w125 = w119;
 assign w125 = w120;
 assign w125 = w121;
 assign w125 = w122;
 assign w125 = w123;
 assign w125 = w124;
 assign w126 = w119;
 assign w126 = w120;
 assign w126 = w121;
 assign w126 = w122;
 assign w126 = w123;
 assign w126 = w124;
 assign w126 = w125;
 assign w127 = w119;
 assign w127 = w120;
 assign w127 = w121;
 assign w127 = w122;
 assign w127 = w123;
 assign w127 = w124;
 assign w127 = w125;
 assign w127 = w126;
 assign w128 = w119;
 assign w128 = w120;
 assign w128 = w121;
 assign w128 = w122;
 assign w128 = w123;
 assign w128 = w124;
 assign w128 = w125;
 assign w128 = w126;
 assign w128 = w127;
 vd014cb #(
  .v5e4a03(p0)
 ) v95d3ee (
  .v7c533e(w1),
  .ve61673(w3),
  .vdd729a(w85),
  .vb86fe4(w109)
 );
 vebfed3 #(
  .vfb06ae(p2)
 ) v1f795f (
  .v2a8434(w1),
  .vac0eb2(w86)
 );
 v35f267 v69ad01 (
  .vcbab45(w3),
  .v0e28cb(w120)
 );
 v02e28e #(
  .v2acdf5(p4),
  .v816a8f(p5)
 ) vebf1fe (
  .v2a7461(w11),
  .v4479bb(w87),
  .v627d0b(w117)
 );
 vf1fcf8 #(
  .v79a04d(p7),
  .v65ff05(p8),
  .vee4e49(p9),
  .vc78345(p10)
 ) v2f90cb (
  .v85e0b7(w6),
  .v371b73(w11),
  .va34edf(w88),
  .v47c08a(w127)
 );
 v91abf1 vdf1d62 (
  .v695853(w12),
  .vcdeb69(w15),
  .v09a613(w119)
 );
 v898c88 #(
  .va13d52(p14)
 ) vd79640 (
  .ve54854(w12),
  .v39d3f6(w13),
  .v24ca1c(w89)
 );
 v42ebf7 vdd90ea (
  .ve8318d(w15),
  .vf54559(w16),
  .v9afc1f(w17),
  .va4102a(w90)
 );
 v3e6c24 v2b1df6 (
  .v608bd9(w16)
 );
 vd014cb #(
  .v5e4a03(p18)
 ) vb932b1 (
  .v712cd1(w17),
  .v7c533e(w19),
  .vdd729a(w91)
 );
 vebfed3 #(
  .vfb06ae(p20)
 ) v9ba1c4 (
  .v2a8434(w19),
  .vac0eb2(w92)
 );
 v02e28e #(
  .v2acdf5(p21),
  .v816a8f(p22)
 ) v7907c7 (
  .v2a7461(w28),
  .v4479bb(w93),
  .v627d0b(w118)
 );
 vf1fcf8 #(
  .v79a04d(p24),
  .v65ff05(p25),
  .vee4e49(p26),
  .vc78345(p27)
 ) vba96c2 (
  .v85e0b7(w23),
  .v371b73(w28),
  .va34edf(w94),
  .v47c08a(w128)
 );
 v02e28e #(
  .v2acdf5(p29),
  .v816a8f(p30)
 ) v6a70bb (
  .v2a7461(w36),
  .v4479bb(w95),
  .v627d0b(w116)
 );
 vf1fcf8 #(
  .v79a04d(p32),
  .v65ff05(p33),
  .vee4e49(p34),
  .vc78345(p35)
 ) va5725b (
  .v85e0b7(w31),
  .v371b73(w36),
  .va34edf(w96),
  .v47c08a(w126)
 );
 v02e28e #(
  .v2acdf5(p37),
  .v816a8f(p38)
 ) v45f686 (
  .v2a7461(w44),
  .v4479bb(w97),
  .v627d0b(w115)
 );
 vf1fcf8 #(
  .v79a04d(p40),
  .v65ff05(p41),
  .vee4e49(p42),
  .vc78345(p43)
 ) vb22595 (
  .v85e0b7(w39),
  .v371b73(w44),
  .va34edf(w98),
  .v47c08a(w125)
 );
 v02e28e #(
  .v2acdf5(p45),
  .v816a8f(p46)
 ) v177aca (
  .v2a7461(w52),
  .v4479bb(w99),
  .v627d0b(w111)
 );
 vf1fcf8 #(
  .v79a04d(p48),
  .v65ff05(p49),
  .vee4e49(p50),
  .vc78345(p51)
 ) v753f18 (
  .v85e0b7(w47),
  .v371b73(w52),
  .va34edf(w100),
  .v47c08a(w122)
 );
 v02e28e #(
  .v2acdf5(p53),
  .v816a8f(p54)
 ) v9ba565 (
  .v2a7461(w60),
  .v4479bb(w101),
  .v627d0b(w110)
 );
 vf1fcf8 #(
  .v79a04d(p56),
  .v65ff05(p57),
  .vee4e49(p58),
  .vc78345(p59)
 ) v3e9ad5 (
  .v85e0b7(w55),
  .v371b73(w60),
  .va34edf(w102),
  .v47c08a(w121)
 );
 v02e28e #(
  .v2acdf5(p61),
  .v816a8f(p62)
 ) vf18ccb (
  .v2a7461(w68),
  .v4479bb(w103),
  .v627d0b(w109)
 );
 vf1fcf8 #(
  .v79a04d(p64),
  .v65ff05(p65),
  .vee4e49(p66),
  .vc78345(p67)
 ) vb98e2b (
  .v85e0b7(w63),
  .v371b73(w68),
  .va34edf(w104),
  .v47c08a(w119)
 );
 v02e28e #(
  .v2acdf5(p69),
  .v816a8f(p70)
 ) v52de8e (
  .v2a7461(w76),
  .v4479bb(w105),
  .v627d0b(w113)
 );
 vf1fcf8 #(
  .v79a04d(p72),
  .v65ff05(p73),
  .vee4e49(p74),
  .vc78345(p75)
 ) v970a97 (
  .v85e0b7(w71),
  .v371b73(w76),
  .va34edf(w106),
  .v47c08a(w124)
 );
 v02e28e #(
  .v2acdf5(p77),
  .v816a8f(p78)
 ) v9f6984 (
  .v2a7461(w84),
  .v4479bb(w107),
  .v627d0b(w112)
 );
 vf1fcf8 #(
  .v79a04d(p80),
  .v65ff05(p81),
  .vee4e49(p82),
  .vc78345(p83)
 ) vffeb6c (
  .v85e0b7(w79),
  .v371b73(w84),
  .va34edf(w108),
  .v47c08a(w123)
 );
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/

module vd014cb #(
 parameter v5e4a03 = 256
) (
 input vdd729a,
 input ve61673,
 input v7c533e,
 output [7:0] vb86fe4,
 output v712cd1
);
 localparam p1 = v5e4a03;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire [0:7] w5;
 assign w0 = ve61673;
 assign w2 = v7c533e;
 assign w3 = vdd729a;
 assign v712cd1 = w4;
 assign vb86fe4 = w5;
 vd014cb_vbd6086 #(
  .M(p1)
 ) vbd6086 (
  .rst(w0),
  .cnt(w2),
  .clk(w3),
  .ov(w4),
  .q(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Contador-8bits-up-rst  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador módulo M, ascendente, de 8 bits, con reset 
/*-------------------------------------------------*/

module vd014cb_vbd6086 #(
 parameter M = 0
) (
 input clk,
 input rst,
 input cnt,
 output [7:0] q,
 output ov
);
 //-- Numero de bits del contador
 localparam N = 8; 
 
 //-- En contadores de N bits:
 //-- M = 2 ** N
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [N:0] qi = 0;
 
 always @(posedge clk)
   if (rst | ov)
     qi <= 0;
   else
     if (cnt)
       qi <= qi + 1;
       
 assign q = qi;
 
 //-- Comprobar overflow
 assign ov = (qi == M);
     
endmodule

module vebfed3 #(
 parameter vfb06ae = 1
) (
 input vac0eb2,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 vebfed3_v6cac2f #(
  .HZ(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Corazon-tic-Hz  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Corazón de bombeo de tics a un frecuencia parametrica en Hz
/*-------------------------------------------------*/

module vebfed3_v6cac2f #(
 parameter HZ = 0
) (
 input clk,
 output o
);
 //localparam HZ;
 
 //-- Constante para dividir y obtener una frecuencia de 1Hz
 localparam M = 12000000/HZ;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = (divcounter == M-1);
 
 //-- La salida es la señal de overflow
 assign o = reset;
 
 
 
 
endmodule

module v35f267 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v35f267_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- NOT  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta NOT
/*-------------------------------------------------*/

module v35f267_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule

module v02e28e #(
 parameter v2acdf5 = "",
 parameter v816a8f = 8'd32
) (
 input v4479bb,
 input [7:0] v627d0b,
 output [7:0] v2a7461
);
 localparam p1 = v2acdf5;
 localparam p3 = v816a8f;
 wire w0;
 wire [0:7] w2;
 wire [0:7] w4;
 assign w0 = v4479bb;
 assign v2a7461 = w2;
 assign w4 = v627d0b;
 v02e28e_vdb04b1 #(
  .ROMFILE(p1),
  .size(p3)
 ) vdb04b1 (
  .clk(w0),
  .D(w2),
  .A(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- rom_Mx8  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- A parametric Mx8 rom Max size 256
/*-------------------------------------------------*/

module v02e28e_vdb04b1 #(
 parameter ROMFILE = 0,
 parameter size = 0
) (
 input clk,
 input [7:0] A,
 output [7:0] D
);
 
 //-- ROM memory
 reg [7:0] rom [0:size-1];
 
 //-- Address bus (4 bits)
 wire [7:0] A;
 
 //-- Data bus (8 bits)
 reg [7:0] D;
 
 always @(negedge clk) begin
   D <= rom[A];
 end
 
 
 //-- Memory contents read
 //-- from the ROMFILE file
 initial begin
     if (ROMFILE) $readmemh(ROMFILE, rom);
 end
 
endmodule

module vf1fcf8 #(
 parameter v79a04d = 8'h00,
 parameter v65ff05 = 8'hFF,
 parameter vee4e49 = 8'h00,
 parameter vc78345 = 8'h7F
) (
 input va34edf,
 input [7:0] v371b73,
 input v47c08a,
 output v85e0b7
);
 localparam p0 = v65ff05;
 localparam p1 = v79a04d;
 localparam p2 = vc78345;
 localparam p3 = vee4e49;
 wire [0:7] w4;
 wire w5;
 wire w6;
 wire w7;
 assign w4 = v371b73;
 assign w5 = v47c08a;
 assign w6 = va34edf;
 assign v85e0b7 = w7;
 vf1fcf8_v815aa1 #(
  .in_max_angle(p0),
  .in_min_angle(p1),
  .in_home_pos(p2),
  .in_trim(p3)
 ) v815aa1 (
  .bitpos(w4),
  .enable_mov(w5),
  .clk(w6),
  .servo(w7)
 );
endmodule

/*-------------------------------------------------*/
/*-- two_pos_servo_with_home  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- An improved version of the servo bit 180 block with position parameters and a home position
/*-------------------------------------------------*/

module vf1fcf8_v815aa1 #(
 parameter in_min_angle = 0,
 parameter in_max_angle = 0,
 parameter in_trim = 0,
 parameter in_home_pos = 0
) (
 input clk,
 input [7:0] bitpos,
 input enable_mov,
 output servo
);
 //-- ServoBit-180
 
 //--Originally created by Juan Gonzalez Gomez
 //--Modified by Julián Caro Linares
 
 //-- Control of simple servo motor
 //-- If enable_mov=0 the servo remains at "home_pos"
 //-- The trim parameter serves as a software offset for calibration
 
 //-- INPUTS:
 //--  clk: Signal of the system (12Mhz)
 //--  bitpos: Position input byte d'0-255 ->0-180º 
 
 //-- OUTPUTS:
 //-- servo : PWM signal to control the servo motor
 
 
 parameter min_angle =in_min_angle; //Min angle allowed
 parameter max_angle =in_max_angle; //Max angle allowed
 parameter home_pos=in_home_pos; //Home-Neutral position
 parameter trim=in_trim; //Position offset for calibration
 
 
 localparam BIT0 = min_angle;
 localparam BIT1 = max_angle;
 localparam BITH=home_pos;
 
 
 //-- 9 bits position of the servo. The additional byte is to avoid an overflow in the trim sum
 reg [8:0] pos;
 
 //-- Position check and assignment
 
 always @(posedge clk)
     begin
     
     //The position will be the sum of the input position +trim
     pos<=bitpos+$signed(trim);
 
     if (enable_mov ==0) //If the motor is not enabled
         begin
            pos<=BITH+$signed(trim);
         end   
     else if (pos>BIT1) //If the pos exceeds the maximum
         begin
            pos<=BIT1; 
         end
     else if (pos<BIT0) //Cuando excede, como la posicion es mucho menor siempre, se mete en el menor de If the pos exceeds the minimum
         begin
            pos<=BIT0;
         end
     else //If the pos is ok. Then the pos will be the sum of the input bitpos plus the trim
         begin
             pos<=bitpos+$signed(trim); 
         end
     
     end
 
     
   
   
 //--- ServoMotor PWM Generation 
 
 //-- M es el valor del divisor para
 //-- obtener tics de M / 12.0 micro-segundos
 localparam M = 94; 
 localparam N = $clog2(M);
 
 //-- Contador para generar los tics
 reg [N-1:0] divcounter = 0;
 
 //-- Flag para indicar que un tic
 //-- ha ocurrido
 reg tic = 0;
 
 //-- Generacion de los tics. Cada
 //-- M ciclos del reloj se genera 1
 always @(posedge clk)
  tic <= (divcounter == M - 2);
 
 //-- Contador modulo M
 always @(posedge clk)
  if (tic)
    divcounter <= 0;
  else
    divcounter <= divcounter + 1;
 
 //-- Contador de la posicion del 
 //-- servo
 reg [10:0] angle_counter = 0;
 
 //-- A la posicion destino hay que
 //-- sumarle un offset, correspondiente
 //-- a los 0.3ms de la posicion inicial
 wire [8:0] pose = {1'b0, pos} + 9'd46;
 
 //-- Con cada tic se incrementa el
 //-- contador de angulo del servo
 always @(posedge clk)
  if (tic)
    angle_counter <= angle_counter + 1;
 
 //-- Cuando el contador es menor que el 
 //-- valor objetivo, la señal de PWM
 //-- del servo se pone 1, y 0 en 
 //-- caso contrario
 
 reg servo;
 
 always @(posedge clk) begin
  servo <= (angle_counter < {2'b00, pose});
  end
 
 
endmodule

module v91abf1 (
 input v695853,
 input vcdeb69,
 output v09a613
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign v09a613 = w0;
 assign w2 = v695853;
 assign w3 = vcdeb69;
 v4b9553 v3d9ac5 (
  .vcbab45(w1),
  .v0e28cb(w2),
  .v3ca442(w3)
 );
 v0ec077 vfc842e (
  .v25ee73(w0),
  .v4b5bc2(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Puerta-AND  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta AND
/*-------------------------------------------------*/

module v4b9553 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v4b9553_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
 v44391c vf4114c (
 
 );
 v44391c vec8c80 (
 
 );
endmodule

/*-------------------------------------------------*/
/*-- NAND  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- NAND logic gate
/*-------------------------------------------------*/

module v4b9553_vf4938a (
 input a,
 input b,
 output c
);
 // NAND logic gate
 
 assign c = ~(a & b);
endmodule

module v44391c
;
 v74d69b v949c82 (
 
 );
 v74d69b ve0f5c7 (
 
 );
endmodule

/*-------------------------------------------------*/
/*-- Transistor-mosfet  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Transistor
/*-------------------------------------------------*/

module v74d69b
;
 vef9670 vdb7477 (
 
 );
 vef9670 v826842 (
 
 );
 vef9670 vdc9b55 (
 
 );
 vef9670 vea688b (
 
 );
endmodule

/*-------------------------------------------------*/
/*-- semiconductores  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Transistor cmos hecho a partir de semiconductores
/*-------------------------------------------------*/

module vef9670
;
 v8450b0 vd09707 (
 
 );
 v8450b0 v38def6 (
 
 );
 v8450b0 v0c6e31 (
 
 );
 v8450b0 v3071e7 (
 
 );
 v8450b0 vca3873 (
 
 );
endmodule

/*-------------------------------------------------*/
/*-- Cristal-si  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Cristal de Siicio
/*-------------------------------------------------*/

module v8450b0
;

endmodule

/*-------------------------------------------------*/
/*-- Atomo-si  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Atomos de silicio
/*-------------------------------------------------*/

module v0ec077 (
 input v4b5bc2,
 output v25ee73
);
 wire w0;
 wire w1;
 wire w2;
 assign v25ee73 = w0;
 assign w1 = v4b5bc2;
 assign w2 = v4b5bc2;
 assign w2 = w1;
 v4b9553 vdf6feb (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Puerta-not  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta NOT
/*-------------------------------------------------*/

module v898c88 #(
 parameter va13d52 = 0
) (
 input v24ca1c,
 input v39d3f6,
 output ve54854
);
 localparam p3 = va13d52;
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v39d3f6;
 assign w1 = v24ca1c;
 assign ve54854 = w2;
 v898c88_vcefff1 #(
  .INI(p3)
 ) vcefff1 (
  .d(w0),
  .clk(w1),
  .tb(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Pulsador-cambio  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Pulsador de cambio. Cada vez que se aprieta cambia de estado
/*-------------------------------------------------*/

module v898c88_vcefff1 #(
 parameter INI = 0
) (
 input clk,
 input d,
 output tb
);
 // Sincronizacion. Evitar 
 // problema de la metaestabilidad
 
 reg d2;
 reg r_in;
 
 always @(posedge clk)
  d2 <= d;
  
 always @(posedge clk)
   r_in <= d2;
 
 
 //-- Debouncer Circuit
 //-- It produces a stable output when the
 //-- input signal is bouncing
 
 reg btn_prev = 0;
 reg btn_out_r = 0;
 
 reg [16:0] counter = 0;
 
 
 always @(posedge clk) begin
 
   //-- If btn_prev and btn_in are differents
   if (btn_prev ^ r_in == 1'b1) begin
     
       //-- Reset the counter
       counter <= 0;
       
       //-- Capture the button status
       btn_prev <= r_in;
   end
     
   //-- If no timeout, increase the counter
   else if (counter[16] == 1'b0)
       counter <= counter + 1;
       
   else
     //-- Set the output to the stable value
     btn_out_r <= btn_prev;
 
 end
 
 
 //-- Generar tic en flanco de subida del boton
 reg old;
 wire tic;
 
 always @(posedge clk)
   old <= btn_out_r;
   
 assign tic = !old & btn_out_r;
 
 //-- Conectar a un biestable de tipo T
 reg q = INI;
 
 always @(posedge clk)
   if (tic)
     q <= ~q;
 
 //-- Sacar el estado del biestable por la salida
 assign tb = q;
 
 
 
 
endmodule

module v42ebf7 #(
 parameter v71e305 = 0
) (
 input va4102a,
 input vf54559,
 input v9afc1f,
 output ve8318d
);
 localparam p2 = v71e305;
 wire w0;
 wire w1;
 wire w3;
 wire w4;
 assign w0 = va4102a;
 assign ve8318d = w1;
 assign w3 = vf54559;
 assign w4 = v9afc1f;
 v42ebf7_vb8adf8 #(
  .INI(p2)
 ) vb8adf8 (
  .clk(w0),
  .q(w1),
  .d(w3),
  .load(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-D  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato
/*-------------------------------------------------*/

module v42ebf7_vb8adf8 #(
 parameter INI = 0
) (
 input clk,
 input d,
 input load,
 output q
);
 reg q = INI;
 always @(posedge clk)
   if (load)
     q <= d;
endmodule

module v3e6c24 (
 output v608bd9
);
 wire w0;
 assign v608bd9 = w0;
 v3e6c24_v68c173 v68c173 (
  .v(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- Bit 1  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Assign 1 to the output wire
/*-------------------------------------------------*/

module v3e6c24_v68c173 (
 output v
);
 // Bit 1
 
 assign v = 1'b1;
endmodule
