// Code generated by Icestudio 0.5.1n201120

`default_nettype none

module main #(
 parameter v411cff = 8'd5,
 parameter vb35d16 = 8'd15,
 parameter v81aac9 = 8'd1,
 parameter vdeab0e = 8'd1,
 parameter v63b38a = 8'd127,
 parameter v1fb517 = 8'd100,
 parameter v9876c1 = 8'd163,
 parameter vf532d9 = 8'd127,
 parameter vffd76b = 8'd200,
 parameter vb08838 = 8'd200,
 parameter va6fd2a = 400_000,
 parameter v5bebce = 400_000,
 parameter vb04c6a = 8'd127,
 parameter v713b8e = 0,
 parameter v1a1263 = 0,
 parameter v1fe6cb = 255,
 parameter v300fd0 = 255,
 parameter v792ee8 = 127,
 parameter v8a0a1b = 163,
 parameter v8e072e = 8'd175,
 parameter v5a807c = 8'd155,
 parameter v8ee9bb = 8'd127,
 parameter v822ed7 = 8'd127,
 parameter v4687b9 = 8'd127,
 parameter v6dd8c2 = 8'd127
) (
 input v80e4fc,
 input ve9b748,
 input vclk,
 output v497995,
 output vfbd418,
 output [7:0] va137f8,
 output va4d387,
 output v852664
);
 localparam p1 = vf532d9;
 localparam p3 = v5bebce;
 localparam p5 = v1fb517;
 localparam p7 = vb08838;
 localparam p8 = vb35d16;
 localparam p10 = v9876c1;
 localparam p12 = va6fd2a;
 localparam p14 = v63b38a;
 localparam p16 = vffd76b;
 localparam p17 = vb04c6a;
 localparam p19 = v8e072e;
 localparam p20 = v8ee9bb;
 localparam p22 = v4687b9;
 localparam p24 = v5a807c;
 localparam p25 = v822ed7;
 localparam p26 = v6dd8c2;
 localparam p31 = v713b8e;
 localparam p32 = v1fe6cb;
 localparam p33 = v792ee8;
 localparam p34 = v1a1263;
 localparam p35 = v300fd0;
 localparam p36 = v8a0a1b;
 localparam p44 = vdeab0e;
 localparam p52 = v411cff;
 localparam p54 = v81aac9;
 wire [0:7] w0;
 wire w2;
 wire [0:7] w4;
 wire [0:7] w6;
 wire [0:7] w9;
 wire w11;
 wire [0:7] w13;
 wire [0:7] w15;
 wire w18;
 wire w21;
 wire w23;
 wire w27;
 wire w28;
 wire w29;
 wire [0:7] w30;
 wire w37;
 wire [0:7] w38;
 wire w39;
 wire w40;
 wire w41;
 wire w42;
 wire [0:7] w43;
 wire [0:7] w45;
 wire w46;
 wire [0:7] w47;
 wire [0:7] w48;
 wire [0:7] w49;
 wire w50;
 wire w51;
 wire [0:7] w53;
 wire [0:7] w55;
 wire w56;
 wire [0:7] w57;
 wire w58;
 wire [0:7] w59;
 wire w60;
 wire w61;
 wire w62;
 wire w63;
 wire w64;
 wire w65;
 wire w66;
 wire w67;
 wire w68;
 wire w69;
 wire w70;
 wire w71;
 wire w72;
 wire w73;
 assign vfbd418 = w18;
 assign v852664 = w23;
 assign w27 = v80e4fc;
 assign v497995 = w29;
 assign va4d387 = w37;
 assign w39 = v80e4fc;
 assign w40 = v80e4fc;
 assign va137f8 = w49;
 assign w61 = ve9b748;
 assign w62 = ve9b748;
 assign w63 = vclk;
 assign w64 = vclk;
 assign w65 = vclk;
 assign w66 = vclk;
 assign w67 = vclk;
 assign w68 = vclk;
 assign w69 = vclk;
 assign w70 = vclk;
 assign w71 = vclk;
 assign w72 = vclk;
 assign w73 = vclk;
 assign w39 = w27;
 assign w40 = w27;
 assign w40 = w39;
 assign w42 = w41;
 assign w49 = w48;
 assign w62 = w61;
 assign w64 = w63;
 assign w65 = w63;
 assign w65 = w64;
 assign w66 = w63;
 assign w66 = w64;
 assign w66 = w65;
 assign w67 = w63;
 assign w67 = w64;
 assign w67 = w65;
 assign w67 = w66;
 assign w68 = w63;
 assign w68 = w64;
 assign w68 = w65;
 assign w68 = w66;
 assign w68 = w67;
 assign w69 = w63;
 assign w69 = w64;
 assign w69 = w65;
 assign w69 = w66;
 assign w69 = w67;
 assign w69 = w68;
 assign w70 = w63;
 assign w70 = w64;
 assign w70 = w65;
 assign w70 = w66;
 assign w70 = w67;
 assign w70 = w68;
 assign w70 = w69;
 assign w71 = w63;
 assign w71 = w64;
 assign w71 = w65;
 assign w71 = w66;
 assign w71 = w67;
 assign w71 = w68;
 assign w71 = w69;
 assign w71 = w70;
 assign w72 = w63;
 assign w72 = w64;
 assign w72 = w65;
 assign w72 = w66;
 assign w72 = w67;
 assign w72 = w68;
 assign w72 = w69;
 assign w72 = w70;
 assign w72 = w71;
 assign w73 = w63;
 assign w73 = w64;
 assign w73 = w65;
 assign w73 = w66;
 assign w73 = w67;
 assign w73 = w68;
 assign w73 = w69;
 assign w73 = w70;
 assign w73 = w71;
 assign w73 = w72;
 va1b138 vd1f25f (
  .v80e965(w0),
  .v21a20e(w2),
  .v8071e6(w4),
  .v9ec8c5(w6),
  .vcff1aa(w30),
  .v71e3cf(w43),
  .ve29c69(w51),
  .v26bbef(w62)
 );
 v36d45a #(
  .vc5c8ea(p1)
 ) vc4b615 (
  .v7d356d(w0)
 );
 v2003b1 #(
  .veca477(p3)
 ) v434e3d (
  .v22d3e8(w2),
  .vc04c2e(w63)
 );
 v36d45a #(
  .vc5c8ea(p5)
 ) v51de92 (
  .v7d356d(w4)
 );
 v36d45a #(
  .vc5c8ea(p7)
 ) v1891f3 (
  .v7d356d(w6)
 );
 v36d45a #(
  .vc5c8ea(p8)
 ) v599563 (
  .v7d356d(w47)
 );
 v21cfcc v703ea6 (
 
 );
 va1b138 v1fb850 (
  .v80e965(w9),
  .v21a20e(w11),
  .v8071e6(w13),
  .v9ec8c5(w15),
  .vcff1aa(w38),
  .v71e3cf(w59),
  .ve29c69(w60),
  .v26bbef(w61)
 );
 v36d45a #(
  .vc5c8ea(p10)
 ) v1c6483 (
  .v7d356d(w9)
 );
 v2003b1 #(
  .veca477(p12)
 ) v302af8 (
  .v22d3e8(w11),
  .vc04c2e(w64)
 );
 v36d45a #(
  .vc5c8ea(p14)
 ) v1293b4 (
  .v7d356d(w13)
 );
 v36d45a #(
  .vc5c8ea(p16)
 ) v4271ac (
  .v7d356d(w15)
 );
 v36d45a #(
  .vc5c8ea(p17)
 ) v50ea59 (
 
 );
 v8d206e #(
  .v79a04d(p19),
  .v65ff05(p20),
  .vc78345(p22)
 ) vf870fd (
  .v8aec2f(w18),
  .v4e3a3a(w21),
  .ve40401(w42),
  .v8c732a(w65)
 );
 v725b7e v77deb5 (
  .v9fb85f(w21)
 );
 v8d206e #(
  .v79a04d(p24),
  .v65ff05(p25),
  .vc78345(p26)
 ) v8e4d72 (
  .v8aec2f(w23),
  .v4e3a3a(w28),
  .ve40401(w41),
  .v8c732a(w66)
 );
 v725b7e vb74ae7 (
  .v9fb85f(w28)
 );
 v0ec077 vef0f9f (
  .v4b5bc2(w27),
  .v25ee73(w41)
 );
 v589d01 #(
  .v79a04d(p31),
  .v65ff05(p32),
  .vc78345(p33)
 ) vded85f (
  .v8aec2f(w29),
  .v3984b5(w30),
  .v4e3a3a(w39),
  .vc27e17(w67)
 );
 v589d01 #(
  .v79a04d(p34),
  .v65ff05(p35),
  .vc78345(p36)
 ) v4de404 (
  .v8aec2f(w37),
  .v3984b5(w38),
  .v4e3a3a(w40),
  .vc27e17(w68)
 );
 v21cfcc veb27c1 (
  .v9fb85f(w46)
 );
 vdd6776 v18b58e (
  .v626df7(w43),
  .vd79d4f(w45),
  .vde8111(w48)
 );
 v36d45a #(
  .vc5c8ea(p44)
 ) v926571 (
  .v7d356d(w45)
 );
 v3987a7 vfdc9de (
  .vb82066(w46),
  .v2c71e5(w47),
  .v2d4f84(w48),
  .vcb287c(w50),
  .v9e2649(w69)
 );
 vd3ec3e v63118c (
  .ve542c2(w50),
  .v6eaeb9(w51),
  .vf569b0(w70)
 );
 v36d45a #(
  .vc5c8ea(p52)
 ) ve3cec7 (
  .v7d356d(w57)
 );
 v21cfcc v71840b (
  .v9fb85f(w56)
 );
 vdd6776 v8a7a13 (
  .vd79d4f(w53),
  .vde8111(w55),
  .v626df7(w59)
 );
 v36d45a #(
  .vc5c8ea(p54)
 ) v516b06 (
  .v7d356d(w53)
 );
 v3987a7 ve1447f (
  .v2d4f84(w55),
  .vb82066(w56),
  .v2c71e5(w57),
  .vcb287c(w58),
  .v9e2649(w71)
 );
 vd3ec3e v4cc329 (
  .ve542c2(w58),
  .v6eaeb9(w60),
  .vf569b0(w72)
 );
 v41f4df v3ae831 (
  .v9a8bfc(w73)
 );
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/

module va1b138 (
 input v21a20e,
 input [7:0] v80e965,
 input v26bbef,
 input [7:0] v71e3cf,
 input [7:0] v8071e6,
 input [7:0] v9ec8c5,
 output [7:0] vcff1aa,
 output ve29c69
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:7] w5;
 wire w6;
 wire w7;
 wire [0:7] w8;
 wire [0:7] w9;
 wire [0:7] w10;
 wire [0:7] w11;
 wire w12;
 assign w4 = v21a20e;
 assign w5 = v80e965;
 assign w6 = v26bbef;
 assign w7 = v21a20e;
 assign w8 = v71e3cf;
 assign w9 = v8071e6;
 assign w10 = v9ec8c5;
 assign vcff1aa = w11;
 assign ve29c69 = w12;
 assign w7 = w4;
 v493ea8 v41e751 (
  .vcbab45(w0),
  .v0e28cb(w3),
  .v3ca442(w6)
 );
 ve543ae v38a488 (
  .v74a653(w1),
  .vc6ae1f(w2),
  .vd7ce19(w4)
 );
 v725b7e vcd26cc (
  .v9fb85f(w1)
 );
 v0ec077 v161325 (
  .v4b5bc2(w2),
  .v25ee73(w3)
 );
 va1b138_vcd2561 vcd2561 (
  .reset(w0),
  .center(w5),
  .cnt(w7),
  .sum_value(w8),
  .min_v(w9),
  .max_v(w10),
  .value(w11),
  .ow(w12)
 );
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/

module va1b138_vcd2561 (
 input cnt,
 input [7:0] center,
 input reset,
 input [7:0] sum_value,
 input [7:0] min_v,
 input [7:0] max_v,
 output [7:0] value,
 output ow
);
 /*
 
 Oscillator Counter
 
 
 Created by Juli√°n Caro Linares
 
 jcarolinares@gmail.co,
 */
 
 
 
 
 reg value;
 reg c_down;
 
 
 
 always @(posedge cnt)
     
     if (reset==1)
         value<=center;
     else if (value>=max_v && c_down==0)
             c_down<=1;
     else if (value<=min_v && c_down==1)
             c_down<=0;
     else
         if (c_down==0)
             value<=value+sum_value;
         else
             value<=value-sum_value;
 
 assign ow=c_down;
endmodule

module v493ea8 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v0ec077 v1a413a (
  .v4b5bc2(w0),
  .v25ee73(w3)
 );
 v0ec077 v6168dd (
  .v4b5bc2(w1),
  .v25ee73(w4)
 );
 v4b9553 vdb792a (
  .vcbab45(w2),
  .v0e28cb(w3),
  .v3ca442(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- OR  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta OR
/*-------------------------------------------------*/

module v0ec077 (
 input v4b5bc2,
 output v25ee73
);
 wire w0;
 wire w1;
 wire w2;
 assign v25ee73 = w0;
 assign w1 = v4b5bc2;
 assign w2 = v4b5bc2;
 assign w2 = w1;
 v4b9553 vdf6feb (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Puerta-not  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta NOT
/*-------------------------------------------------*/

module v4b9553 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v4b9553_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
 v44391c vf4114c (
 
 );
 v44391c vec8c80 (
 
 );
endmodule

/*-------------------------------------------------*/
/*-- NAND  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- NAND logic gate
/*-------------------------------------------------*/

module v4b9553_vf4938a (
 input a,
 input b,
 output c
);
 // NAND logic gate
 
 assign c = ~(a & b);
endmodule

module v44391c
;
 v74d69b v949c82 (
 
 );
 v74d69b ve0f5c7 (
 
 );
endmodule

/*-------------------------------------------------*/
/*-- Transistor-mosfet  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Transistor
/*-------------------------------------------------*/

module v74d69b
;
 vef9670 vdb7477 (
 
 );
 vef9670 v826842 (
 
 );
 vef9670 vdc9b55 (
 
 );
 vef9670 vea688b (
 
 );
endmodule

/*-------------------------------------------------*/
/*-- semiconductores  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Transistor cmos hecho a partir de semiconductores
/*-------------------------------------------------*/

module vef9670
;
 v8450b0 vd09707 (
 
 );
 v8450b0 v38def6 (
 
 );
 v8450b0 v0c6e31 (
 
 );
 v8450b0 v3071e7 (
 
 );
 v8450b0 vca3873 (
 
 );
endmodule

/*-------------------------------------------------*/
/*-- Cristal-si  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Cristal de Siicio
/*-------------------------------------------------*/

module v8450b0
;

endmodule

/*-------------------------------------------------*/
/*-- Atomo-si  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Atomos de silicio
/*-------------------------------------------------*/

module ve543ae #(
 parameter v3c760f = 0
) (
 input vd7ce19,
 input v74a653,
 output vc6ae1f
);
 localparam p1 = v3c760f;
 wire w0;
 wire w2;
 wire w3;
 assign vc6ae1f = w0;
 assign w2 = vd7ce19;
 assign w3 = v74a653;
 v77050b #(
  .v38488b(p1)
 ) v767db1 (
  .vc24d9f(w0),
  .vb55943(w2),
  .vef4cea(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-D-0  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable D inicializado a 0
/*-------------------------------------------------*/

module v77050b #(
 parameter v38488b = 0
) (
 input vb55943,
 input vef4cea,
 output vc24d9f
);
 localparam p3 = v38488b;
 wire w0;
 wire w1;
 wire w2;
 assign w0 = vef4cea;
 assign w1 = vb55943;
 assign vc24d9f = w2;
 v77050b_v526aa2 #(
  .DINI(p3)
 ) v526aa2 (
  .d(w0),
  .clk(w1),
  .q(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Flip-flop D  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable D con inicializaci√≥n param√©trica
/*-------------------------------------------------*/

module v77050b_v526aa2 #(
 parameter DINI = 0
) (
 input clk,
 input d,
 output q
);
 // D flip-flop
 // parameter DINI = 0;
 
 reg q = DINI;
 
 always @(posedge clk)
   q <= d;
   
 
 
endmodule

module v725b7e (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 v725b7e_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- 1  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Un bit constante a 1
/*-------------------------------------------------*/

module v725b7e_vb2eccd (
 output q
);
 //-- Bit constante a 1
 assign q = 1'b1;
 
 
endmodule

module v36d45a #(
 parameter vc5c8ea = 8'h00
) (
 output [7:0] v7d356d
);
 localparam p1 = vc5c8ea;
 wire [0:7] w0;
 assign v7d356d = w0;
 v36d45a_v465065 #(
  .V(p1)
 ) v465065 (
  .k(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- AA_8bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor constante 0xAA para bus de 8 bits
/*-------------------------------------------------*/

module v36d45a_v465065 #(
 parameter V = 0
) (
 output [7:0] k
);
 assign k = V;
endmodule

module v2003b1 #(
 parameter veca477 = 12_000_000
) (
 input vc04c2e,
 output v22d3e8
);
 localparam p2 = veca477;
 wire w0;
 wire w1;
 assign w0 = vc04c2e;
 assign v22d3e8 = w1;
 v2003b1_v3805f2 #(
  .M_in(p2)
 ) v3805f2 (
  .clk(w0),
  .clk_out(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- regular_pump_bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Put the a M value (12000000 by default), to control the period of the pump 
/*-------------------------------------------------*/

module v2003b1_v3805f2 #(
 parameter M_in = 0
) (
 input clk,
 output clk_out
);
 //-- module bomba_x1(input wire clk, output wire clk_1hz)
 
 //-- Bombeo de bits de periodo regular a X Hz (Dictado por M y N)
 
 //-- Constante para dividir y obtener una frecuencia de  X Hz
 parameter M = M_in;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 //-- Contador modulo M. tras M pulsos de reloj vuelve a 0
 always @(posedge clk)
   divcounter <= (divcounter == M - 1) ? 0 : divcounter + 1;
 
 //-- Obtener la se√±al de X Hz. La se√±al no tiene ciclo del 50%
 wire clk_doublehz;
 assign clk_doublehz = divcounter[N-1]; 
 
 //-- Usamos un biestable T para dividir entre 2 y obtener una se√±al
 //-- de X Hz y ciclo del 50%
 reg T = 0;
 always @(posedge clk_doublehz)
   T <= ~T;
   
 //-- Se√±al de salida de 1Hz y ciclo del 50%
 assign clk_out = T;
   
 //endmodule
endmodule

module v21cfcc (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 v21cfcc_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- 0  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Un bit constante a 0
/*-------------------------------------------------*/

module v21cfcc_vb2eccd (
 output q
);
 //-- Bit constante a 0
 assign q = 1'b0;
 
 
endmodule

module v8d206e #(
 parameter v79a04d = 8'h39,
 parameter v65ff05 = 8'hAB,
 parameter vc78345 = 8'h72
) (
 input v8c732a,
 input ve40401,
 input v4e3a3a,
 output v8aec2f
);
 localparam p1 = v65ff05;
 localparam p3 = v79a04d;
 localparam p4 = vc78345;
 wire w0;
 wire w2;
 wire w5;
 wire w6;
 assign v8aec2f = w0;
 assign w2 = ve40401;
 assign w5 = v4e3a3a;
 assign w6 = v8c732a;
 v8d206e_v815aa1 #(
  .in_max_angle(p1),
  .in_min_angle(p3),
  .in_home_pos(p4)
 ) v815aa1 (
  .servo(w0),
  .bitpos(w2),
  .enable_mov(w5),
  .clk(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- two_pos_servo_with_home  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- An improved version of the servo bit 180 block with position parameters and a home position
/*-------------------------------------------------*/

module v8d206e_v815aa1 #(
 parameter in_min_angle = 0,
 parameter in_max_angle = 0,
 parameter in_home_pos = 0
) (
 input clk,
 input bitpos,
 input enable_mov,
 output servo
);
 //-- ServoBit-180
 
 //-- Control de un servo Futaba 3003
 //-- con un bit. Se mueve a dos posiciones
 //-- Si enable movement est√° 0, el servo se mantiene en la posici√≥n "home_pos"
 //-- que se corresonden con 0 / 1
 //-- El angulo total recorrido es de 180 grados
 
 //-- ENTRADAS:
 //--  clk: Se√±al del sistema (12Mhz)
 //--  bitpos: Bit de posicion (0 - posicion derecha, 1 - posicion izquierda)
      
 //   Bitpos 0   Bitpos 1
 //    ___          ___
 //   | o---->  <----o |
 //   |   |        |   |
 //   |___|        |___|
 
 //-- SALIDAS:
 //-- servo : Se√±al PWM para controlar el servo
 
 //-- Constantes para el angulo DEL servo
 localparam ANG_0   = 8'h01;
 localparam ANG_45=8'h39;
 localparam ANG_90 = 8'h5F;
 localparam ANG_135=8'hAB;
 localparam ANG_180=8'hE0;
 localparam ANG_120=8'h5F;
 
 parameter min_angle =in_min_angle;
 parameter max_angle =in_max_angle;
 parameter home_pos=in_home_pos;
 
 //-- Posicion del servo cuando el
 //-- bit de entrada es 0
 //-- La corona del servo mira a la derecha
 localparam BIT0 = min_angle;
 
 //-- Posicion el servo cuando el BIT
 //-- de entrada es 1
 //-- La corona del servo mira a la izquierda
 localparam BIT1 = max_angle;
 
 //--Posicion del servo neutra o home
 localparam BITH=home_pos;
 
 
 //-- Posicion de 8 bits del servo
 reg [7:0] pos;
 
 //-- Asignar la posicion de 8 bits
 //-- segun si lo recibido es 0 √≥ 1 o segun si el enable_mov est√° activado
 always @(posedge clk)
   begin//pos <= bitpos ? BIT1 : BIT0;
     if (enable_mov ==0)
        pos<=BITH;
     else if (bitpos==0)
        pos<=BIT0;
     else
        pos<=BIT1;
   end
 //---
 //--- ServoMotor 
 
 //-- M es el valor del divisor para
 //-- obtener tics de M / 12.0 micro-segundos
 localparam M = 94; 
 localparam N = $clog2(M);
 
 //-- Contador para generar los tics
 reg [N-1:0] divcounter = 0;
 
 //-- Flag para indicar que un tic
 //-- ha ocurrido
 reg tic = 0;
 
 //-- Generacion de los tics. Cada
 //-- M ciclos del reloj se genera 1
 always @(posedge clk)
  tic <= (divcounter == M - 2);
 
 //-- Contador modulo M
 always @(posedge clk)
  if (tic)
    divcounter <= 0;
  else
    divcounter <= divcounter + 1;
 
 //-- Contador de la posicion del 
 //-- servo
 reg [10:0] angle_counter = 0;
 
 //-- A la posicion destino hay que
 //-- sumarle un offset, correspondiente
 //-- a los 0.3ms de la posicion inicial
 wire [8:0] pose = {1'b0, pos} + 9'd46;
 
 //-- Con cada tic se incrementa el
 //-- contador de angulo del servo
 always @(posedge clk)
  if (tic)
    angle_counter <= angle_counter + 1;
 
 //-- Cuando el contador es menor que el 
 //-- valor objetivo, la se√±al de PWM
 //-- del servo se pone 1, y 0 en 
 //-- caso contrario
 
 reg servo;
 
 always @(posedge clk) begin
  servo <= (angle_counter < {2'b00, pose});
  end
 
 
 
 
endmodule

module v589d01 #(
 parameter v79a04d = 8'h00,
 parameter v65ff05 = 8'hFF,
 parameter vc78345 = 8'h7F
) (
 input vc27e17,
 input [0:7] v3984b5,
 input v4e3a3a,
 output v8aec2f
);
 localparam p1 = v65ff05;
 localparam p2 = v79a04d;
 localparam p3 = vc78345;
 wire w0;
 wire w4;
 wire w5;
 wire [0:7] w6;
 assign v8aec2f = w0;
 assign w4 = vc27e17;
 assign w5 = v4e3a3a;
 assign w6 = v3984b5;
 v589d01_v815aa1 #(
  .in_max_angle(p1),
  .in_min_angle(p2),
  .in_home_pos(p3)
 ) v815aa1 (
  .servo(w0),
  .clk(w4),
  .enable_mov(w5),
  .bitpos(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- two_pos_servo_with_home  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- An improved version of the servo bit 180 block with position parameters and a home position
/*-------------------------------------------------*/

module v589d01_v815aa1 #(
 parameter in_min_angle = 0,
 parameter in_max_angle = 0,
 parameter in_home_pos = 0
) (
 input clk,
 input [7:0] bitpos,
 input enable_mov,
 output servo
);
 //-- ServoBit-180
 
 //-- Control de un servo Futaba 3003
 //-- con un bit. Se mueve a dos posiciones
 //-- Si enable movement est√° 0, el servo se mantiene en la posici√≥n "home_pos"
 //-- que se corresonden con 0 / 1
 //-- El angulo total recorrido es de 180 grados
 
 //-- ENTRADAS:
 //--  clk: Se√±al del sistema (12Mhz)
 //--  bitpos: Bit de posicion (0 - posicion derecha, 1 - posicion izquierda)
      
 //   Bitpos 0   Bitpos 1
 //    ___          ___
 //   | o---->  <----o |
 //   |   |        |   |
 //   |___|        |___|
 
 //-- SALIDAS:
 //-- servo : Se√±al PWM para controlar el servo
 
 //-- Constantes para el angulo DEL servo
 localparam ANG_0   = 8'h01;
 localparam ANG_45=8'h39;
 localparam ANG_90 = 8'h5F;
 localparam ANG_135=8'hAB;
 localparam ANG_180=8'hE0;
 localparam ANG_120=8'h5F;
 
 parameter min_angle =in_min_angle;
 parameter max_angle =in_max_angle;
 parameter home_pos=in_home_pos;
 
 //-- Posicion del servo cuando el
 //-- bit de entrada es 0
 //-- La corona del servo mira a la derecha
 localparam BIT0 = min_angle;
 
 //-- Posicion el servo cuando el BIT
 //-- de entrada es 1
 //-- La corona del servo mira a la izquierda
 localparam BIT1 = max_angle;
 
 //--Posicion del servo neutra o home
 localparam BITH=home_pos;
 
 
 //-- Posicion de 8 bits del servo
 reg [7:0] pos;
 
 //-- Asignar la posicion de 8 bits
 //-- segun si lo recibido es 0 √≥ 1 o segun si el enable_mov est√° activado
 always @(posedge clk)
     begin
     if (enable_mov ==0)
         begin
            pos<=BITH;
         end   
     else if (bitpos>BIT1)
         begin
            pos<=BIT1;
         end
     else if (bitpos<BIT0)
         begin
            pos<=BIT0;
         end
     else
         begin
            pos<=bitpos;
         end
     end
 
 
 //always @(posedge clk)
 //  begin//pos <= bitpos ? BIT1 : BIT0;
 //    if (enable_mov ==0)
 //       pos<=BITH;
 //    else if (bitpos==0)
 //       pos<=BIT0;
 //    else
 //       pos<=BIT1;
 //  end  
   
 //---
 //--- ServoMotor 
 
 //-- M es el valor del divisor para
 //-- obtener tics de M / 12.0 micro-segundos
 localparam M = 94; 
 localparam N = $clog2(M);
 
 //-- Contador para generar los tics
 reg [N-1:0] divcounter = 0;
 
 //-- Flag para indicar que un tic
 //-- ha ocurrido
 reg tic = 0;
 
 //-- Generacion de los tics. Cada
 //-- M ciclos del reloj se genera 1
 always @(posedge clk)
  tic <= (divcounter == M - 2);
 
 //-- Contador modulo M
 always @(posedge clk)
  if (tic)
    divcounter <= 0;
  else
    divcounter <= divcounter + 1;
 
 //-- Contador de la posicion del 
 //-- servo
 reg [10:0] angle_counter = 0;
 
 //-- A la posicion destino hay que
 //-- sumarle un offset, correspondiente
 //-- a los 0.3ms de la posicion inicial
 wire [8:0] pose = {1'b0, pos} + 9'd46;
 
 //-- Con cada tic se incrementa el
 //-- contador de angulo del servo
 always @(posedge clk)
  if (tic)
    angle_counter <= angle_counter + 1;
 
 //-- Cuando el contador es menor que el 
 //-- valor objetivo, la se√±al de PWM
 //-- del servo se pone 1, y 0 en 
 //-- caso contrario
 
 reg servo;
 
 always @(posedge clk) begin
  servo <= (angle_counter < {2'b00, pose});
  end
 
 
 
 
endmodule

module vdd6776 (
 input [7:0] vd79d4f,
 input [7:0] vde8111,
 output ve259b1,
 output [7:0] v626df7
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire w2;
 wire [0:7] w3;
 wire w4;
 assign w0 = vd79d4f;
 assign w1 = vde8111;
 assign v626df7 = w3;
 assign ve259b1 = w4;
 v2e17d8 v1ff3ab (
  .vd79d4f(w0),
  .vde8111(w1),
  .v3582e1(w2),
  .v626df7(w3),
  .ve259b1(w4)
 );
 v21cfcc v4575e8 (
  .v9fb85f(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Sumador-8bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sumador de 8 bits con acarreo de salida
/*-------------------------------------------------*/

module v2e17d8 (
 input [7:0] vd79d4f,
 input [7:0] vde8111,
 input v3582e1,
 output ve259b1,
 output [7:0] v626df7
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire [0:3] w3;
 wire [0:3] w4;
 wire [0:3] w5;
 wire [0:3] w6;
 wire w7;
 wire [0:3] w8;
 wire w9;
 wire w10;
 wire [0:3] w11;
 assign v626df7 = w0;
 assign w1 = vd79d4f;
 assign w2 = vde8111;
 assign w7 = v3582e1;
 assign ve259b1 = w10;
 v4856f5 v4acdd9 (
  .vb226fb(w0),
  .v0064b3(w3),
  .vbb1f02(w8)
 );
 vdeb8ad v141b01 (
  .v3d06d6(w1),
  .va80ecf(w4),
  .vd47139(w11)
 );
 vdeb8ad v8b1fae (
  .v3d06d6(w2),
  .va80ecf(w5),
  .vd47139(w6)
 );
 v1ceeb3 v91f882 (
  .v504ed5(w3),
  .v39c767(w4),
  .v40c2be(w5),
  .v3582e1(w9),
  .ve259b1(w10)
 );
 v1ceeb3 v26bef4 (
  .v40c2be(w6),
  .v3582e1(w7),
  .v504ed5(w8),
  .ve259b1(w9),
  .v39c767(w11)
 );
endmodule

/*-------------------------------------------------*/
/*-- Sumador-8bits-cin  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sumador de 8 bits con acarreo de salida y de entrada
/*-------------------------------------------------*/

module v4856f5 (
 input [3:0] v0064b3,
 input [3:0] vbb1f02,
 output [7:0] vb226fb
);
 wire [0:3] w0;
 wire [0:3] w1;
 wire [0:7] w2;
 assign w0 = v0064b3;
 assign w1 = vbb1f02;
 assign vb226fb = w2;
 v4856f5_v89b409 v89b409 (
  .i1(w0),
  .i0(w1),
  .o(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Join-2  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Agregador de 2 buses de 4 a bus de 8bits
/*-------------------------------------------------*/

module v4856f5_v89b409 (
 input [3:0] i1,
 input [3:0] i0,
 output [7:0] o
);
 assign o = {i1,i0};
 
 
endmodule

module vdeb8ad (
 input [7:0] v3d06d6,
 output [3:0] va80ecf,
 output [3:0] vd47139
);
 wire [0:7] w0;
 wire [0:3] w1;
 wire [0:3] w2;
 assign w0 = v3d06d6;
 assign va80ecf = w1;
 assign vd47139 = w2;
 vdeb8ad_v89b409 v89b409 (
  .i(w0),
  .o1(w1),
  .o0(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Split-2  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Separador de bus de 8bits en 2 (4 + 4)
/*-------------------------------------------------*/

module vdeb8ad_v89b409 (
 input [7:0] i,
 output [3:0] o1,
 output [3:0] o0
);
 assign {o1,o0} = i;
 
 
endmodule

module v1ceeb3 (
 input [3:0] v39c767,
 input [3:0] v40c2be,
 input v3582e1,
 output ve259b1,
 output [3:0] v504ed5
);
 wire [0:3] w0;
 wire [0:3] w1;
 wire [0:3] w2;
 wire [0:1] w3;
 wire [0:1] w4;
 wire [0:1] w5;
 wire w6;
 wire [0:1] w7;
 wire [0:1] w8;
 wire w9;
 wire w10;
 wire [0:1] w11;
 assign v504ed5 = w0;
 assign w1 = v39c767;
 assign w2 = v40c2be;
 assign w9 = v3582e1;
 assign ve259b1 = w10;
 v4ecca6 v18a070 (
  .v21a753(w1),
  .v9e4a4a(w5),
  .vf24fb3(w7)
 );
 v4ecca6 v4d4f5f (
  .v21a753(w2),
  .v9e4a4a(w4),
  .vf24fb3(w8)
 );
 v42d6b1 v9c756d (
  .vadf1ad(w0),
  .vd1b8eb(w3),
  .v0e5c05(w11)
 );
 v90f305 v771b43 (
  .vd1dd06(w3),
  .v9f023c(w4),
  .v40d3be(w5),
  .v3582e1(w6),
  .ve259b1(w10)
 );
 v90f305 ve46001 (
  .ve259b1(w6),
  .v40d3be(w7),
  .v9f023c(w8),
  .v3582e1(w9),
  .vd1dd06(w11)
 );
endmodule

/*-------------------------------------------------*/
/*-- Sumador-4bits-cin  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sumador de 4 bits con acarreo de salida y de entrada
/*-------------------------------------------------*/

module v4ecca6 (
 input [3:0] v21a753,
 output [1:0] v9e4a4a,
 output [1:0] vf24fb3
);
 wire [0:3] w0;
 wire [0:1] w1;
 wire [0:1] w2;
 assign w0 = v21a753;
 assign v9e4a4a = w1;
 assign vf24fb3 = w2;
 v4ecca6_v89b409 v89b409 (
  .i(w0),
  .o1(w1),
  .o0(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Split-2-2  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Separador de bus de 4bits en 2 (2 + 2)
/*-------------------------------------------------*/

module v4ecca6_v89b409 (
 input [3:0] i,
 output [1:0] o1,
 output [1:0] o0
);
 assign {o1,o0} = i;
 
 
endmodule

module v42d6b1 (
 input [1:0] vd1b8eb,
 input [1:0] v0e5c05,
 output [3:0] vadf1ad
);
 wire [0:1] w0;
 wire [0:1] w1;
 wire [0:3] w2;
 assign w0 = vd1b8eb;
 assign w1 = v0e5c05;
 assign vadf1ad = w2;
 v42d6b1_v89b409 v89b409 (
  .i1(w0),
  .i0(w1),
  .o(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Join2-2  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Agregador de 2 buses (2+2)  a bus de 4bits
/*-------------------------------------------------*/

module v42d6b1_v89b409 (
 input [1:0] i1,
 input [1:0] i0,
 output [3:0] o
);
 assign o = {i1,i0};
 
 
endmodule

module v90f305 (
 input [1:0] v40d3be,
 input [1:0] v9f023c,
 input v3582e1,
 output ve259b1,
 output [1:0] vd1dd06
);
 wire w0;
 wire w1;
 wire w2;
 wire [0:1] w3;
 wire w4;
 wire w5;
 wire [0:1] w6;
 wire w7;
 wire w8;
 wire [0:1] w9;
 wire w10;
 wire w11;
 assign w0 = v3582e1;
 assign ve259b1 = w1;
 assign w3 = v40d3be;
 assign w6 = v9f023c;
 assign vd1dd06 = w9;
 vaf0ab1 vd698f6 (
  .v45b85e(w0),
  .v3fb1ac(w2),
  .v3a02f3(w5),
  .v6fe456(w8),
  .v8da78a(w11)
 );
 vaf0ab1 v877678 (
  .v3fb1ac(w1),
  .v45b85e(w2),
  .v3a02f3(w4),
  .v6fe456(w7),
  .v8da78a(w10)
 );
 v28a281 v03d607 (
  .vc9d8af(w3),
  .v26347c(w4),
  .vc266df(w5)
 );
 v28a281 v07fe38 (
  .vc9d8af(w6),
  .v26347c(w7),
  .vc266df(w8)
 );
 vc67fda v80475d (
  .v16058a(w9),
  .v29d743(w10),
  .v4d8fdf(w11)
 );
endmodule

/*-------------------------------------------------*/
/*-- Sumador-2bits-cin  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sumador de 2 bits con acarreo de salida y de entrada
/*-------------------------------------------------*/

module vaf0ab1 (
 input v3a02f3,
 input v6fe456,
 input v45b85e,
 output v3fb1ac,
 output v8da78a
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 assign v3fb1ac = w0;
 assign w2 = v45b85e;
 assign v8da78a = w3;
 assign w6 = v3a02f3;
 assign w7 = v6fe456;
 v493ea8 va64435 (
  .vcbab45(w0),
  .v3ca442(w1),
  .v0e28cb(w5)
 );
 v2177b1 v02bbca (
  .v8aaf0c(w1),
  .vd24b39(w2),
  .v274c0e(w3),
  .v48c82f(w4)
 );
 v2177b1 v9689e2 (
  .v274c0e(w4),
  .v8aaf0c(w5),
  .v48c82f(w6),
  .vd24b39(w7)
 );
endmodule

/*-------------------------------------------------*/
/*-- Sumador-1bit  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sumador de 1bit, con arraceo de entrada y salida
/*-------------------------------------------------*/

module v2177b1 (
 input v48c82f,
 input vd24b39,
 output v8aaf0c,
 output v274c0e
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 assign v8aaf0c = w0;
 assign w1 = v48c82f;
 assign w2 = vd24b39;
 assign v274c0e = w3;
 assign w4 = vd24b39;
 assign w5 = v48c82f;
 assign w4 = w2;
 assign w5 = w1;
 v91abf1 v9da6eb (
  .v09a613(w0),
  .v695853(w1),
  .vcdeb69(w2)
 );
 v3dfc1e v5fe03f (
  .vcbab45(w3),
  .v3ca442(w4),
  .v0e28cb(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Semi-sumador  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Semisumador. 2 bits de entrada, saca la suma (S) y el acarreo (C)
/*-------------------------------------------------*/

module v91abf1 (
 input v695853,
 input vcdeb69,
 output v09a613
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign v09a613 = w0;
 assign w2 = v695853;
 assign w3 = vcdeb69;
 v4b9553 v3d9ac5 (
  .vcbab45(w1),
  .v0e28cb(w2),
  .v3ca442(w3)
 );
 v0ec077 vfc842e (
  .v25ee73(w0),
  .v4b5bc2(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Puerta-AND  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta AND
/*-------------------------------------------------*/

module v3dfc1e (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 assign vcbab45 = w0;
 assign w1 = v0e28cb;
 assign w2 = v3ca442;
 assign w4 = v3ca442;
 assign w8 = v0e28cb;
 assign w4 = w2;
 assign w8 = w1;
 v4b9553 vc87175 (
  .vcbab45(w0),
  .v0e28cb(w5),
  .v3ca442(w6)
 );
 v0ec077 v3ca685 (
  .v4b5bc2(w1),
  .v25ee73(w3)
 );
 v0ec077 vc544fc (
  .v4b5bc2(w2),
  .v25ee73(w7)
 );
 v4b9553 v17c8f6 (
  .v0e28cb(w3),
  .v3ca442(w4),
  .vcbab45(w5)
 );
 v4b9553 v3e587c (
  .vcbab45(w6),
  .v3ca442(w7),
  .v0e28cb(w8)
 );
endmodule

/*-------------------------------------------------*/
/*-- XOR  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- XOR logic gate
/*-------------------------------------------------*/

module v28a281 (
 input [1:0] vc9d8af,
 output v26347c,
 output vc266df
);
 wire [0:1] w0;
 wire w1;
 wire w2;
 assign w0 = vc9d8af;
 assign v26347c = w1;
 assign vc266df = w2;
 v28a281_v89b409 v89b409 (
  .i(w0),
  .o1(w1),
  .o0(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Split2  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Separador de bus de 2bits
/*-------------------------------------------------*/

module v28a281_v89b409 (
 input [1:0] i,
 output o1,
 output o0
);
 assign {o1,o0} = i;
 
 
endmodule

module vc67fda (
 input v29d743,
 input v4d8fdf,
 output [1:0] v16058a
);
 wire w0;
 wire w1;
 wire [0:1] w2;
 assign w0 = v29d743;
 assign w1 = v4d8fdf;
 assign v16058a = w2;
 vc67fda_v89b409 v89b409 (
  .i1(w0),
  .i0(w1),
  .o(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Join2  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Agregador de 2 cables a bus de 2bits
/*-------------------------------------------------*/

module vc67fda_v89b409 (
 input i1,
 input i0,
 output [1:0] o
);
 assign o = {i1,i0};
 
 
endmodule

module v3987a7 (
 input v9e2649,
 input vcb287c,
 input vb82066,
 input [7:0] v2c71e5,
 output [7:0] v2d4f84
);
 wire [0:7] w0;
 wire w1;
 wire w2;
 wire [0:7] w3;
 wire w4;
 wire w5;
 wire w6;
 wire [0:7] w7;
 assign w0 = v2c71e5;
 assign w2 = vb82066;
 assign w5 = vcb287c;
 assign w6 = v9e2649;
 assign v2d4f84 = w7;
 assign w7 = w3;
 v63d044 v51ccc4 (
  .va5cf8e(w0),
  .v2027b7(w1),
  .vc26f8e(w3)
 );
 v3f1160 vee0479 (
  .v3ca442(w1),
  .v0e28cb(w2),
  .vcbab45(w4)
 );
 v72d045 vaac98b (
  .v2d4f84(w3),
  .vbc8536(w4),
  .v820ff9(w5),
  .v9e2649(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- Contador-8bits-Modulo-M-rst-cnt  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador ascendente de 8bits, M√≥dulo M, reset s√≠ncrono, entrada de cuenta
/*-------------------------------------------------*/

module v63d044 (
 input [7:0] vc26f8e,
 input [7:0] va5cf8e,
 output v2027b7
);
 wire w0;
 wire [0:7] w1;
 wire [0:7] w2;
 assign v2027b7 = w0;
 assign w1 = vc26f8e;
 assign w2 = va5cf8e;
 v63d044_v8a4e43 v8a4e43 (
  .eq(w0),
  .a(w1),
  .b(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Comparador-8bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Comparador de 8 bits
/*-------------------------------------------------*/

module v63d044_v8a4e43 (
 input [7:0] a,
 input [7:0] b,
 output eq
);
 
 assign eq = (a == b);
endmodule

module v3f1160 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v3f1160_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- OR  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta OR
/*-------------------------------------------------*/

module v3f1160_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta OR
 
 //-- module or (input wire a, input wire b,
 //--            output wire c);
 
 
 assign c = a | b;
 
 
 //-- endmodule
endmodule

module v72d045 (
 input v9e2649,
 input v820ff9,
 input vbc8536,
 output [7:0] v2d4f84
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire w3;
 wire w4;
 wire w5;
 assign v2d4f84 = w1;
 assign w3 = v820ff9;
 assign w4 = vbc8536;
 assign w5 = v9e2649;
 assign w1 = w0;
 v869dab v12ac6f (
  .ve0197a(w0),
  .v4493cb(w2)
 );
 vf659ba vfae019 (
  .v63a2aa(w0),
  .v4779ac(w2),
  .v2e9e69(w3),
  .vdc6593(w4),
  .ve386ea(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Contador-8-rst-cnt  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador ascendente de 8bits, con reset s√≠ncrono y entrada de cuenta
/*-------------------------------------------------*/

module v869dab (
 input [7:0] ve0197a,
 output [7:0] v4493cb
);
 wire [0:7] w0;
 wire [0:7] w1;
 assign w0 = ve0197a;
 assign v4493cb = w1;
 v869dab_va480e1 va480e1 (
  .i(w0),
  .o(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Sum-1-8bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sumar 1 al bus de 8 bits
/*-------------------------------------------------*/

module v869dab_va480e1 (
 input [7:0] i,
 output [7:0] o
);
 
 assign o = i + 1;
endmodule

module vf659ba (
 input ve386ea,
 input [7:0] v4779ac,
 input v2e9e69,
 input vdc6593,
 output [7:0] v63a2aa
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire [0:3] w2;
 wire [0:3] w3;
 wire [0:3] w4;
 wire w5;
 wire w6;
 wire [0:3] w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 assign w0 = v4779ac;
 assign v63a2aa = w1;
 assign w5 = ve386ea;
 assign w6 = ve386ea;
 assign w8 = v2e9e69;
 assign w9 = v2e9e69;
 assign w10 = vdc6593;
 assign w11 = vdc6593;
 assign w6 = w5;
 assign w9 = w8;
 assign w11 = w10;
 v08574d vb25dd3 (
  .v3d06d6(w0),
  .vd47139(w3),
  .va80ecf(w7)
 );
 v2e80af ved68f0 (
  .vb226fb(w1),
  .vbb1f02(w2),
  .v0064b3(w4)
 );
 v37262b vabbd84 (
  .v1b9edf(w4),
  .ve386ea(w5),
  .v2a4745(w7),
  .v0421e9(w8),
  .v1f71b2(w11)
 );
 v37262b v13781b (
  .v1b9edf(w2),
  .v2a4745(w3),
  .ve386ea(w6),
  .v0421e9(w9),
  .v1f71b2(w10)
 );
endmodule

/*-------------------------------------------------*/
/*-- Reg8-rst-load  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Registro de 8 bits, con reset s√≠ncrono y entrada de load
/*-------------------------------------------------*/

module v08574d (
 input [7:0] v3d06d6,
 output [3:0] va80ecf,
 output [3:0] vd47139
);
 wire [0:7] w0;
 wire [0:3] w1;
 wire [0:3] w2;
 assign w0 = v3d06d6;
 assign va80ecf = w1;
 assign vd47139 = w2;
 v08574d_v89b409 v89b409 (
  .i(w0),
  .o1(w1),
  .o0(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Split4  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Separador de bus de 4bits en 2 (2 + 2)
/*-------------------------------------------------*/

module v08574d_v89b409 (
 input [7:0] i,
 output [3:0] o1,
 output [3:0] o0
);
 assign {o1,o0} = i;
 
 
endmodule

module v2e80af (
 input [3:0] v0064b3,
 input [3:0] vbb1f02,
 output [7:0] vb226fb
);
 wire [0:3] w0;
 wire [0:3] w1;
 wire [0:7] w2;
 assign w0 = v0064b3;
 assign w1 = vbb1f02;
 assign vb226fb = w2;
 v2e80af_v89b409 v89b409 (
  .i1(w0),
  .i0(w1),
  .o(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Join8  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Agregador de 2 cables a bus de 8bits
/*-------------------------------------------------*/

module v2e80af_v89b409 (
 input [3:0] i1,
 input [3:0] i0,
 output [7:0] o
);
 assign o = {i1,i0};
 
 
endmodule

module v37262b (
 input ve386ea,
 input [3:0] v2a4745,
 input v0421e9,
 input v1f71b2,
 output [3:0] v1b9edf
);
 wire [0:3] w0;
 wire [0:3] w1;
 wire [0:1] w2;
 wire [0:1] w3;
 wire w4;
 wire w5;
 wire [0:1] w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire [0:1] w11;
 assign w0 = v2a4745;
 assign v1b9edf = w1;
 assign w4 = v1f71b2;
 assign w5 = v0421e9;
 assign w7 = ve386ea;
 assign w8 = ve386ea;
 assign w9 = v1f71b2;
 assign w10 = v0421e9;
 assign w8 = w7;
 assign w9 = w4;
 assign w10 = w5;
 vccf42e veb43b6 (
  .v21a753(w0),
  .vf24fb3(w3),
  .v9e4a4a(w11)
 );
 ve0583d v8f490d (
  .vadf1ad(w1),
  .v0e5c05(w2),
  .vd1b8eb(w6)
 );
 v8d6d46 vf8d6e7 (
  .v45c976(w6),
  .ve386ea(w7),
  .v2ab36b(w9),
  .v1c1e38(w10),
  .vaf74f8(w11)
 );
 v8d6d46 v8a95f0 (
  .v45c976(w2),
  .vaf74f8(w3),
  .v2ab36b(w4),
  .v1c1e38(w5),
  .ve386ea(w8)
 );
endmodule

/*-------------------------------------------------*/
/*-- Reg4-rst-load  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Registro de 4 bits con reset s√≠ncrono y entrada de load
/*-------------------------------------------------*/

module vccf42e (
 input [3:0] v21a753,
 output [1:0] v9e4a4a,
 output [1:0] vf24fb3
);
 wire [0:3] w0;
 wire [0:1] w1;
 wire [0:1] w2;
 assign w0 = v21a753;
 assign v9e4a4a = w1;
 assign vf24fb3 = w2;
 vccf42e_v89b409 v89b409 (
  .i(w0),
  .o1(w1),
  .o0(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Split4  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Separador de bus de 4bits en 2 (2 + 2)
/*-------------------------------------------------*/

module vccf42e_v89b409 (
 input [3:0] i,
 output [1:0] o1,
 output [1:0] o0
);
 assign {o1,o0} = i;
 
 
endmodule

module ve0583d (
 input [1:0] vd1b8eb,
 input [1:0] v0e5c05,
 output [3:0] vadf1ad
);
 wire [0:1] w0;
 wire [0:1] w1;
 wire [0:3] w2;
 assign w0 = vd1b8eb;
 assign w1 = v0e5c05;
 assign vadf1ad = w2;
 ve0583d_v89b409 v89b409 (
  .i1(w0),
  .i0(w1),
  .o(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Join4  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Agregador de 2 cables a bus de 4bits
/*-------------------------------------------------*/

module ve0583d_v89b409 (
 input [1:0] i1,
 input [1:0] i0,
 output [3:0] o
);
 assign o = {i1,i0};
 
 
endmodule

module v8d6d46 (
 input ve386ea,
 input [1:0] vaf74f8,
 input v1c1e38,
 input v2ab36b,
 output [1:0] v45c976
);
 wire [0:1] w0;
 wire [0:1] w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 assign w0 = vaf74f8;
 assign v45c976 = w1;
 assign w4 = ve386ea;
 assign w5 = ve386ea;
 assign w6 = v2ab36b;
 assign w7 = v2ab36b;
 assign w8 = v1c1e38;
 assign w9 = v1c1e38;
 assign w5 = w4;
 assign w7 = w6;
 assign w9 = w8;
 v1ed638 v78a213 (
  .vc9d8af(w0),
  .vc266df(w10),
  .v26347c(w11)
 );
 vbb32a6 v16a56a (
  .v16058a(w1),
  .v4d8fdf(w2),
  .v29d743(w3)
 );
 v2ee7c4 v6d8215 (
  .vd06c53(w3),
  .vb27d62(w4),
  .v572c59(w7),
  .vc33bc3(w9),
  .v9066c2(w11)
 );
 v2ee7c4 v4e1adf (
  .vd06c53(w2),
  .vb27d62(w5),
  .v572c59(w6),
  .vc33bc3(w8),
  .v9066c2(w10)
 );
endmodule

/*-------------------------------------------------*/
/*-- Reg2  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Registro de 2 bits, con load y reset s√≠ncrono
/*-------------------------------------------------*/

module v1ed638 (
 input [1:0] vc9d8af,
 output v26347c,
 output vc266df
);
 wire [0:1] w0;
 wire w1;
 wire w2;
 assign w0 = vc9d8af;
 assign v26347c = w1;
 assign vc266df = w2;
 v1ed638_v89b409 v89b409 (
  .i(w0),
  .o1(w1),
  .o0(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Split2  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Separador de bus de 2bits
/*-------------------------------------------------*/

module v1ed638_v89b409 (
 input [1:0] i,
 output o1,
 output o0
);
 assign {o1,o0} = i;
 
 
endmodule

module vbb32a6 (
 input v29d743,
 input v4d8fdf,
 output [1:0] v16058a
);
 wire w0;
 wire w1;
 wire [0:1] w2;
 assign w0 = v29d743;
 assign w1 = v4d8fdf;
 assign v16058a = w2;
 vbb32a6_v89b409 v89b409 (
  .i1(w0),
  .i0(w1),
  .o(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Join2  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Agregador de 2 cables a bus de 2bits
/*-------------------------------------------------*/

module vbb32a6_v89b409 (
 input i1,
 input i0,
 output [1:0] o
);
 assign o = {i1,i0};
 
 
endmodule

module v2ee7c4 #(
 parameter v4d7602 = 0
) (
 input vb27d62,
 input v9066c2,
 input vc33bc3,
 input v572c59,
 output vd06c53
);
 localparam p2 = v4d7602;
 wire w0;
 wire w1;
 wire w3;
 wire w4;
 wire w5;
 assign vd06c53 = w0;
 assign w1 = v572c59;
 assign w3 = vb27d62;
 assign w4 = v9066c2;
 assign w5 = vc33bc3;
 v7501b1 #(
  .vd93afa(p2)
 ) vb38ad6 (
  .vef02d7(w0),
  .ve64610(w1),
  .va44fe0(w3),
  .vc96ba8(w4),
  .vb24dd7(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-D-rst-ena-0  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable D, con reset s√≠ncrono y enable, inicializado a 0
/*-------------------------------------------------*/

module v7501b1 #(
 parameter vd93afa = 0
) (
 input va44fe0,
 input vc96ba8,
 input vb24dd7,
 input ve64610,
 output vef02d7
);
 localparam p1 = vd93afa;
 localparam p6 = vd93afa;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 assign w0 = va44fe0;
 assign vef02d7 = w2;
 assign w4 = ve64610;
 assign w9 = vc96ba8;
 assign w10 = vb24dd7;
 assign w8 = w2;
 v785abe #(
  .v38488b(p1)
 ) vac2e90 (
  .vb55943(w0),
  .vc24d9f(w2),
  .vef4cea(w3)
 );
 v818f8f v8b5217 (
  .vdcf411(w3),
  .v02803c(w4),
  .v240f0a(w5),
  .v7e3c7c(w7)
 );
 v2eee9f #(
  .va5aba0(p6)
 ) v23e484 (
  .v9b792b(w5)
 );
 v818f8f ve57038 (
  .vdcf411(w7),
  .v7e3c7c(w8),
  .v240f0a(w9),
  .v02803c(w10)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-D-ena-rst  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable tipo D con entrada de reset y enable, inicializado al par√°metro INI
/*-------------------------------------------------*/

module v785abe #(
 parameter v38488b = 0
) (
 input vb55943,
 input vef4cea,
 output vc24d9f
);
 localparam p3 = v38488b;
 wire w0;
 wire w1;
 wire w2;
 assign w0 = vef4cea;
 assign w1 = vb55943;
 assign vc24d9f = w2;
 v785abe_v526aa2 #(
  .DINI(p3)
 ) v526aa2 (
  .d(w0),
  .clk(w1),
  .q(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Flip-flop D  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable D con inicializaci√≥n param√©trica
/*-------------------------------------------------*/

module v785abe_v526aa2 #(
 parameter DINI = 0
) (
 input clk,
 input d,
 output q
);
 // D flip-flop
 // parameter DINI = 0;
 
 reg q = DINI;
 
 always @(posedge clk)
 begin
   q <= d;
 end
 
 
endmodule

module v818f8f (
 input v7e3c7c,
 input v240f0a,
 input v02803c,
 output vdcf411
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 assign vdcf411 = w0;
 assign w4 = v02803c;
 assign w5 = v02803c;
 assign w6 = v240f0a;
 assign w7 = v7e3c7c;
 assign w5 = w4;
 v32200d v372b35 (
  .vcbab45(w3),
  .v0e28cb(w4)
 );
 v11a6f4 v832cd2 (
  .vcbab45(w1),
  .v0e28cb(w3),
  .v3ca442(w7)
 );
 v2fa1b5 v56cee0 (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w2)
 );
 v11a6f4 va685a3 (
  .vcbab45(w2),
  .v3ca442(w5),
  .v0e28cb(w6)
 );
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/

module v32200d (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v32200d_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- NOT  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- NOT logic gate
/*-------------------------------------------------*/

module v32200d_vd54ca1 (
 input a,
 output c
);
 // NOT logic gate
 
 assign c = ~ a;
endmodule

module v11a6f4 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v11a6f4_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- AND  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- AND logic gate
/*-------------------------------------------------*/

module v11a6f4_vf4938a (
 input a,
 input b,
 output c
);
 // AND logic gate
 
 assign c = a & b;
endmodule

module v2fa1b5 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v2fa1b5_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- OR  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- OR logic gate
/*-------------------------------------------------*/

module v2fa1b5_vf4938a (
 input a,
 input b,
 output c
);
 // OR logic gate
 
 assign c = a | b;
endmodule

module v2eee9f #(
 parameter va5aba0 = 0
) (
 output v9b792b
);
 localparam p0 = va5aba0;
 wire w1;
 assign v9b792b = w1;
 v2eee9f_v48515b #(
  .V(p0)
 ) v48515b (
  .k(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Const-1bit  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Constante gen√©rica de 1 bit
/*-------------------------------------------------*/

module v2eee9f_v48515b #(
 parameter V = 0
) (
 output k
);
 assign k = V;
 
endmodule

module vd3ec3e (
 input vf569b0,
 input v6eaeb9,
 output ve542c2
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign ve542c2 = w1;
 assign w2 = v6eaeb9;
 assign w3 = vf569b0;
 assign w4 = vf569b0;
 assign w4 = w3;
 v29c50d vc84384 (
  .vc947f0(w0),
  .va5ed64(w1),
  .vcf7ec2(w4)
 );
 v10d933 v37d1e8 (
  .vd4e5d7(w0),
  .v6a82dd(w2),
  .v444878(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Pulsador-P  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Generacion de pulsos de 1 periodo con un pulsador
/*-------------------------------------------------*/

module v29c50d (
 input vcf7ec2,
 input vc947f0,
 output va5ed64
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 assign w2 = vcf7ec2;
 assign w3 = vc947f0;
 assign va5ed64 = w4;
 assign w5 = vc947f0;
 assign w5 = w3;
 v8c5d8b vf1e615 (
  .vc6ae1f(w0),
  .vd7ce19(w2),
  .v74a653(w3)
 );
 v7f3e9f v359d19 (
  .v0e28cb(w0),
  .vcbab45(w1)
 );
 vb8ea79 v5ffab8 (
  .v0e28cb(w1),
  .vcbab45(w4),
  .v3ca442(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Pulso  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Generar un pulso de reloj al recibir un flanco por la entrada
/*-------------------------------------------------*/

module v8c5d8b (
 input vd7ce19,
 input v74a653,
 output vc6ae1f
);
 wire w0;
 wire w1;
 wire w2;
 assign vc6ae1f = w0;
 assign w1 = v74a653;
 assign w2 = vd7ce19;
 v537d57 vf99111 (
  .vc6ae1f(w0),
  .v74a653(w1),
  .vd7ce19(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-D-0  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable D inicializado a 0
/*-------------------------------------------------*/

module v537d57 #(
 parameter vab1fa2 = 0
) (
 input vd7ce19,
 input v74a653,
 output vc6ae1f
);
 localparam p0 = vab1fa2;
 wire w1;
 wire w2;
 wire w3;
 assign w1 = vd7ce19;
 assign w2 = v74a653;
 assign vc6ae1f = w3;
 v7bd255 #(
  .v38488b(p0)
 ) v4746ff (
  .vb55943(w1),
  .vef4cea(w2),
  .vc24d9f(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-D-0  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable D inicializado a 0
/*-------------------------------------------------*/

module v7bd255 #(
 parameter v38488b = 0
) (
 input vb55943,
 input vef4cea,
 output vc24d9f
);
 localparam p3 = v38488b;
 wire w0;
 wire w1;
 wire w2;
 assign w0 = vef4cea;
 assign w1 = vb55943;
 assign vc24d9f = w2;
 v7bd255_v526aa2 #(
  .DINI(p3)
 ) v526aa2 (
  .d(w0),
  .clk(w1),
  .q(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Flip-flop D  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Delay flip-flop
/*-------------------------------------------------*/

module v7bd255_v526aa2 #(
 parameter DINI = 0
) (
 input clk,
 input d,
 output q
);
 // D flip-flop
 // parameter DINI = 0;
 
 reg q = DINI;
 
 always @(posedge clk)
 begin
   q <= d;
 end
 
 
endmodule

module v7f3e9f (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v7f3e9f_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- NOT  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta NOT
/*-------------------------------------------------*/

module v7f3e9f_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule

module vb8ea79 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 vb8ea79_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- AND  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta AND
/*-------------------------------------------------*/

module vb8ea79_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta AND
 
 //-- module and (input wire a, input wire b,
 //--             output wire c);
 
 assign c = a & b;
 
 //-- endmodule
endmodule

module v10d933 (
 input v444878,
 input v6a82dd,
 output vd4e5d7
);
 wire w0;
 wire w1;
 wire w2;
 assign vd4e5d7 = w0;
 assign w1 = v444878;
 assign w2 = v6a82dd;
 v10d933_va7041c va7041c (
  .out(w0),
  .clk(w1),
  .in(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Debouncer  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Remove the rebound on a mechanical switch
/*-------------------------------------------------*/

module v10d933_va7041c (
 input clk,
 input in,
 output out
);
 //-- Debouncer Circuit
 //-- It produces a stable output when the
 //-- input signal is bouncing
 
 reg btn_prev = 0;
 reg btn_out_r = 0;
 
 reg [16:0] counter = 0;
 
 
 always @(posedge clk) begin
 
   //-- If btn_prev and btn_in are differents
   if (btn_prev ^ in == 1'b1) begin
     
       //-- Reset the counter
       counter <= 0;
       
       //-- Capture the button status
       btn_prev <= in;
   end
     
   //-- If no timeout, increase the counter
   else if (counter[16] == 1'b0)
       counter <= counter + 1;
       
   else
     //-- Set the output to the stable value
     btn_out_r <= btn_prev;
 
 end
 
 assign out = btn_out_r;
 
endmodule

module v41f4df (
 input v9a8bfc,
 input v27dec4,
 output v4642b6,
 output v93207d,
 output vc462cd,
 output va5a321
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 assign w1 = v27dec4;
 assign w3 = v9a8bfc;
 assign w4 = v9a8bfc;
 assign w5 = v9a8bfc;
 assign v4642b6 = w6;
 assign v93207d = w7;
 assign vc462cd = w8;
 assign va5a321 = w9;
 assign w4 = w3;
 assign w5 = w3;
 assign w5 = w4;
 assign w6 = w2;
 v3bfe20 va6a3d4 (
  .v3c12b5(w0),
  .ve7f5e6(w1),
  .v717e81(w5)
 );
 vcfd9ba v6065ca (
  .v6a82dd(w0),
  .vd4e5d7(w2),
  .v444878(w4)
 );
 vb4dc3c v41932f (
  .v27dec4(w2),
  .vbc671d(w3),
  .v1ae69c(w7),
  .v0f832c(w8),
  .v4642b6(w9)
 );
endmodule

/*-------------------------------------------------*/
/*-- pulsador-changed  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Pulsador con tic de cambio, pulsaci√≥n y liberaci√≥n de tecla
/*-------------------------------------------------*/

module v3bfe20 (
 input v717e81,
 input ve7f5e6,
 output v3c12b5
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = ve7f5e6;
 assign w1 = v717e81;
 assign v3c12b5 = w2;
 v3bfe20_v683a9f v683a9f (
  .i(w0),
  .clk(w1),
  .o(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Sync  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sincronizar las entradas de datos con el reloj del sistema
/*-------------------------------------------------*/

module v3bfe20_v683a9f (
 input clk,
 input i,
 output o
);
 // Sincronizacion. Evitar 
 // problema de la metaestabilidad
 
 reg d1;
 reg d2;
 
 always @(posedge clk)
  d1 <= i;
  
 always @(posedge clk)
   d2 <= d1;
   
 assign o = d2;
endmodule

module vcfd9ba (
 input v444878,
 input v6a82dd,
 output vd4e5d7
);
 wire w0;
 wire w1;
 wire w2;
 assign vd4e5d7 = w0;
 assign w1 = v444878;
 assign w2 = v6a82dd;
 vcfd9ba_va7041c va7041c (
  .out(w0),
  .clk(w1),
  .in(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Debouncer  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Remove the rebound on a mechanical switch
/*-------------------------------------------------*/

module vcfd9ba_va7041c (
 input clk,
 input in,
 output out
);
 //-- Debouncer Circuit
 //-- It produces a stable output when the
 //-- input signal is bouncing
 
 reg btn_prev = 0;
 reg btn_out_r = 0;
 
 reg [16:0] counter = 0;
 
 
 always @(posedge clk) begin
 
   //-- If btn_prev and btn_in are differents
   if (btn_prev ^ in == 1'b1) begin
     
       //-- Reset the counter
       counter <= 0;
       
       //-- Capture the button status
       btn_prev <= in;
   end
     
   //-- If no timeout, increase the counter
   else if (counter[16] == 1'b0)
       counter <= counter + 1;
       
   else
     //-- Set the output to the stable value
     btn_out_r <= btn_prev;
 
 end
 
 assign out = btn_out_r;
 
endmodule

module vb4dc3c (
 input vbc671d,
 input v27dec4,
 output v1ae69c,
 output v0f832c,
 output v4642b6
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign w2 = v27dec4;
 assign v4642b6 = w3;
 assign v1ae69c = w4;
 assign w5 = vbc671d;
 assign v0f832c = w6;
 assign w4 = w1;
 assign w6 = w0;
 vc386a7 vdd740f (
  .vb1094d(w0),
  .v3487af(w1),
  .ve78ab8(w2),
  .ved8395(w5)
 );
 v816138 v10bb2a (
  .v3ca442(w0),
  .v0e28cb(w1),
  .vcbab45(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Change-detector  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Detect changed on the input signal 
/*-------------------------------------------------*/

module vc386a7 (
 input ved8395,
 input ve78ab8,
 output v3487af,
 output vb1094d
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w0 = ved8395;
 assign w1 = ve78ab8;
 assign v3487af = w2;
 assign vb1094d = w3;
 vc386a7_v287d69 v287d69 (
  .clk(w0),
  .i(w1),
  .up(w2),
  .down(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Detector-flancos  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Detector de flancos de subida y bajada. Emite tic por las salidas correspondientes al detecta los flancos
/*-------------------------------------------------*/

module vc386a7_v287d69 (
 input clk,
 input i,
 output up,
 output down
);
 reg q = 0;
 
 always @(posedge clk)
   q <= i;
   
 assign up = (~q & i);  
 assign down = (q & ~i);  
endmodule

module v816138 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v816138_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- OR  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta OR
/*-------------------------------------------------*/

module v816138_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta OR
 
 //-- module and (input wire a, input wire b,
 //--             output wire c);
 
 assign c = a | b;
 
 //-- endmodule
endmodule
